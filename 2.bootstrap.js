(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(t,e,n){"use strict";n.r(e);var r=n(5),i=n(31);class o{constructor(t){this.canvas=t,this.ctx=this.canvas.getContext("2d")}render(t){const e=window.devicePixelRatio||1,n=this.canvas.getBoundingClientRect();this.canvas.width=n.width*e,this.canvas.height=n.height*e,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.beginPath();const r=t.width(),i=t.height(),o=this.canvas.width/r,s=this.canvas.height/i,c=o>s?s:o,a=new Map,d=new Map;for(let e=0;e<r;e++)for(let n=0;n<i;n++){const r=t.at(e,n),i=r.kind;let o=a.get(i);if(void 0===o&&(o=r.color_code(),void 0!==o&&a.set(i,o)),this.ctx.fillStyle=o,this.ctx.fillRect(e*c,n*c,c,c),!d.has(i)){const t=r.legend();d.set(i,{text:t,color:o})}}return this.ctx.stroke(),{legends:d}}}var s=n(33);class c{constructor(t){this.canvas=t}render(t){const e=window.devicePixelRatio||1,n=this.canvas.getBoundingClientRect();this.canvas.width=n.width*e,this.canvas.height=n.height*e;const i=t.width(),o=t.height(),c=this.determineCellSize(i,o),a=new s.Point(this.canvas.width/2,c+198),d=new s.PixelView(this.canvas,a),h=new Map,u=new Map,l=new Map;let f=null;function w(t,e,n){const r=function(t,e){const n=u.get(t);if(void 0!==n)return n;let r=e.rgb_color();void 0===r&&(r=16777215);const i=(new s.CubeColor).getByHorizontalColor(r);return u.set(t,i),l.set(t,{text:e.legend(),color:e.color_code()}),i}(t,n),i=c+2*e,o=new s.CubeDimension(c,c,i);return new s.Cube(o,r,!1)}function g(t){const e=t.kind,n=t.altitude;if(l.has(e)||l.set(e,{text:t.legend(),color:t.color_code()}),e===r.b.Top)return null===f&&(f=w(e,n,t)),f;if(e===r.b.Town||e===r.b.Path)return w(e,n,t);const i=h.get(n);if(void 0!==i)return i;const o=w(e,n,t);return h.set(n,o),o}for(let e=0;e<i;e++)for(let n=0;n<o;n++){const r=g(t.at(e,n)),i=new s.Point3D(e*c,n*c,0);d.renderObject(r,i)}return{legends:l}}determineCellSize(t,e){const n=e+t,r=(this.canvas.height-200)/n*2,i=this.canvas.width/n*2/Math.sqrt(3);let o=Math.floor(r>i?i:r);return o%2==1&&o--,o>6?o:6}}(new class{constructor(){this.generator=r.a.new(),this.currentBoard=null,this.screen=null;const t=document.getElementById("dimension-selector"),e=t[t.selectedIndex];this.dim=e.value,t.addEventListener("change",this.onVisualizationChange.bind(this)),this.widthInput=document.getElementById("width-input"),this.heightInput=document.getElementById("height-input"),this.screenRoot=document.getElementById("screen-root"),this.initRenderer(),this.paintButton=document.getElementById("paint-button"),this.paintButton.addEventListener("click",()=>{this.render()}),this.legends=document.getElementById("legends"),this.downloadJSONButton=document.getElementById("download-json-button"),this.downloadJSONButton.addEventListener("click",this.onDownloadJSON.bind(this)),this.downloadPNGButton=document.getElementById("download-png-button"),this.downloadPNGButton.addEventListener("click",this.onDownloadPNG.bind(this))}render(){this.paintButton.textContent="Painting...";for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.add("disabled");window.setTimeout(()=>{const t=Date.now(),[e,n]=this.getSize(),r=this.generator.gen_auto(e,n),i=this.renderer.render(r);this.legends.innerHTML="";const o=Array.from(i.legends.keys());o.sort();for(const t of o){const e=i.legends.get(t),n=document.createElement("div");n.className="legend";const r=document.createElement("div");r.className="legend-color",r.style.backgroundColor=e.color||"none",n.appendChild(r);const o=document.createElement("div");o.className="legend-name",o.textContent=e.text,n.appendChild(o),this.legends.appendChild(n)}this.currentBoard=r;for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.remove("disabled");this.paintButton.textContent="Generate",console.log("Consumed:",Date.now()-t)},0)}getSize(){const t=parseInt(this.widthInput.value,10),e=parseInt(this.heightInput.value,10);if(!isNaN(t)&&!isNaN(e))return[t,e];if("3d"===this.dim)return[120,120];const n=this.screenRoot.getBoundingClientRect();if(isNaN(t)){if(isNaN(e)){const t=(n.height>n.width?n.height:n.width)/200;return[Math.floor(n.width/t),Math.floor(n.height/t)]}{const t=n.height/e;return[Math.floor(n.width/t),e]}}{const e=n.width/t;return[t,Math.floor(n.height/e)]}}initRenderer(){const t=this.screenRoot.firstChild;switch(null!==t&&this.screenRoot.removeChild(t),this.currentBoard=null,this.screen=document.createElement("canvas"),this.screen.className="screen",this.screenRoot.appendChild(this.screen),this.dim){case"2d":this.renderer=new o(this.screen);break;case"3d":this.renderer=new c(this.screen);break;default:throw new Error("Unknown context "+this.dim)}}onDownloadJSON(t){if(null===this.currentBoard)return;const e=new Blob([this.currentBoard.as_json()],{type:"text/plain;charset=utf-8"});Object(i.saveAs)(e,"board.json")}onDownloadPNG(t){null!==this.screen&&this.screen.toBlob(t=>Object(i.saveAs)(t,"board.png"))}onVisualizationChange(t){const e=t.target,n=e[e.selectedIndex].value;this.dim!==n&&(this.dim=n,this.initRenderer(),this.render())}}).render()},47:function(t,e,n){"use strict";var r=n.w[t.i];t.exports=r;n(5);r.u()},48:function(t,e){function n(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id=48},5:function(t,e,n){"use strict";(function(t){n.d(e,"b",(function(){return p})),n.d(e,"a",(function(){return _})),n.d(e,"m",(function(){return b})),n.d(e,"f",(function(){return y})),n.d(e,"h",(function(){return B})),n.d(e,"g",(function(){return x})),n.d(e,"c",(function(){return N})),n.d(e,"l",(function(){return C})),n.d(e,"j",(function(){return E})),n.d(e,"d",(function(){return k})),n.d(e,"k",(function(){return I})),n.d(e,"e",(function(){return M})),n.d(e,"i",(function(){return O})),n.d(e,"n",(function(){return P}));var r=n(47);const i=new Array(32).fill(void 0);function o(t){return i[t]}i.push(void 0,null,!0,!1);let s=i.length;function c(t){const e=o(t);return function(t){t<36||(i[t]=s,s=t)}(t),e}let a,d,h=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});function u(){return 0===a.byteLength&&(a=new Uint8Array(r.t.buffer)),a}function l(t,e){return h.decode(u().subarray(t,t+e))}function f(){return 0===d.byteLength&&(d=new Int32Array(r.t.buffer)),d}function w(t){s===i.length&&i.push(i.length+1);const e=s;return s=i[e],i[e]=t,e}function g(t,e){return u().subarray(t/1,t/1+e)}h.decode();Object.freeze({Low:0,0:"Low",Middle:1,1:"Middle",High:2,2:"High"});const p=Object.freeze({Sea:0,0:"Sea",Mountain:1,1:"Mountain",Forest:2,2:"Forest",Plain:3,3:"Plain",Town:4,4:"Town",Top:5,5:"Top",Highland:6,6:"Highland",DeepSea:7,7:"DeepSea",Path:8,8:"Path"});class v{static __wrap(t){const e=Object.create(v.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();r.a(t)}width(){return r.m(this.ptr)>>>0}height(){return r.l(this.ptr)>>>0}at(t,e){const n=r.k(this.ptr,t,e);return m.__wrap(n)}as_json(){try{const n=r.h(-16);r.j(n,this.ptr);var t=f()[n/4+0],e=f()[n/4+1];let i;return 0!==t&&(i=l(t,e).slice(),r.i(t,1*e)),i}finally{r.h(16)}}}class m{static __wrap(t){const e=Object.create(m.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();r.b(t)}get kind(){return r.e(this.ptr)>>>0}set kind(t){r.g(this.ptr,t)}get altitude(){return r.d(this.ptr)}set altitude(t){r.f(this.ptr,t)}color_code(){try{const n=r.h(-16);r.n(n,this.ptr);var t=f()[n/4+0],e=f()[n/4+1];let i;return 0!==t&&(i=l(t,e).slice(),r.i(t,1*e)),i}finally{r.h(16)}}rgb_color(){try{const n=r.h(-16);r.p(n,this.ptr);var t=f()[n/4+0],e=f()[n/4+1];return 0===t?void 0:e>>>0}finally{r.h(16)}}legend(){try{const n=r.h(-16);r.o(n,this.ptr);var t=f()[n/4+0],e=f()[n/4+1];return l(t,e)}finally{r.h(16),r.i(t,e)}}}class _{static __wrap(t){const e=Object.create(_.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();r.c(t)}static new(){const t=r.s();return _.__wrap(t)}gen_auto(t,e){const n=r.r(this.ptr,t,e);return v.__wrap(n)}gen(t,e,n){const i=r.q(this.ptr,t,e,n);return v.__wrap(i)}}function b(t){c(t)}function y(t,e,n){o(t).getRandomValues(g(e,n))}function B(t,e,n){o(t).randomFillSync(g(e,n))}function x(t,e){return w(new Function(l(t,e)))}function N(t,e){return w(o(t).call(o(e)))}function C(t,e){return o(t)===o(e)}function E(t){return w(o(t).self)}function k(t){return w(o(t).crypto)}function I(t){return void 0===o(t)}function M(t){return w(o(t).getRandomValues)}function O(t,e){return w(n(48)(l(t,e)))}function P(t,e){throw new Error(l(t,e))}d=new Int32Array(r.t.buffer),a=new Uint8Array(r.t.buffer)}).call(this,n(46)(t))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,