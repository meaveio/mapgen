(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,,function(i,t,n){"use strict";var s,e;(e=(s=function(i,t,n,s,e,o){this.initialize(i,t,n,s,e,o)}).prototype).a=1,e.b=0,e.c=0,e.d=1,e.tx=0,e.ty=0,e.initialize=function(i,t,n,s,e,o){return this.a=void 0===i?1:i,this.b=t||0,this.c=n||0,this.d=void 0===s?1:s,this.tx=e||0,this.ty=o||0,this},e.toString=function(){return"[Matrix]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(23);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype).imageData=null,e.canvas=null,e.context=null,e.initialize=function(i,t,n){if(void 0===i||void 0===t)throw new Error("BitmapData width or height is missing");return this.canvas=n?o.getDefaultCanvas():o.getNewCanvas(),this.canvas.setAttribute("width",i),this.canvas.setAttribute("height",t),this.context=this.canvas.getContext("2d"),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.imageData=this.context.createImageData(i,t),this},e.setPixel=function(i,t,n){var s=4*(t*this.imageData.width+i);this.setPixelByIndex(s,n)},e.setPixelByIndex=function(i,t){var n=this.imageData.data;n[i]=t>>>16&255,n[i+1]=t>>>8&255,n[i+2]=t>>>0&255,n[i+3]=t>>>24&255},e.checkPixelAvailable=function(i,t){var n=4*(t*this.imageData.width+i);return 0===this.imageData.data[n+3]},e.floodFill=function(i,t,n){if(0!=(n>>>24&255)){var s,e,o,a,h,r=i,l=t,c=[],u=[],x=[],d=this.imageData.width,m=this.imageData.height;if(!(r<0||l<0||r>=d||l>=m)){if(!this.checkPixelAvailable(r,l))throw new Error("Start point for flood fill is already filled");for(s=r;s>=0;s-=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s+1,e-1))for(e=this.checkPixelAvailable(s,e-1)?e-1:this.checkPixelAvailable(s+1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(s,e);e-=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(e=l;e<m;e+=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s+1,e+1))for(e=this.checkPixelAvailable(s,e+1)?e+1:this.checkPixelAvailable(s+1,e+2)?e+2:m;e<m&&this.checkPixelAvailable(s,e);e+=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(s===r&&(x=u.concat()),o=!1,a=0;a<x.length;a+=1){for(h=0;h<x.length;h+=1)if(u[h]===x[a]){o=!0,l=x[a];break}if(o)break}if(!o)break;x=u.concat(),u=[]}for(l=t,x=[],u=[],s=r=i;s<d;s+=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s-1,e-1))for(e=this.checkPixelAvailable(s,e-1)?e-1:this.checkPixelAvailable(s-1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(s,e);e-=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(e=l;e<m;e+=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s-1,e+1))for(e=this.checkPixelAvailable(s,e+1)?e+1:this.checkPixelAvailable(s-1,e+2)?e+2:m;e<m&&this.checkPixelAvailable(s,e);e+=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(s===r&&(x=u.concat()),o=!1,a=0;a<x.length;a+=1){for(h=0;h<x.length;h+=1)if(u[h]===x[a]){o=!0,l=x[a];break}if(o)break}if(!o)break;x=u.concat(),u=[]}for(a=0;a<c.length;a+=1)this.setPixelByIndex(c[a],n)}}},e.toString=function(){return"[BitmapData]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).canvas=null,e.w=null,e.h=null,e.dimension=null,e.color=null,e.border=null,e.bitmapData=null,e.useDefaultCanvas=null,e.matrix=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractPrimitive]"},i.exports=s},,function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).xAxis=null,e.yAxis=null,e.zAxis=null,e.tall=!1,e.initialize=function(){return this},e.toString=function(){return"[AbstractDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t){return this.border=a.get32(void 0===i?8882055:i),this.inner=a.get32(void 0===t?15658734:t),this},e.getByInnerColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[SideColor]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("ColorGeom is a static Class, cannot be instanced.")}).get32=function(i){return i<4278190080?i+4278190080:i},e.applyBrightness=function(i,t,n){var s,e,o,a,h,r,l;return s=i>>>24&255,h=(313524*(e=i>>>16&255)>>20)+(615514*(o=i>>>8&255)>>20)+(119538*(a=255&i)>>20),l=-(155189*e>>20)-(303038*o>>20)+(458227*a>>20),r=(644874*e>>20)-(540016*o>>20)-(104857*a>>20),n?h=60+Math.pow(h,1.2):h+=t,e=h+(1195376*r>>20),o=h-(408944*l>>20)-(608174*r>>20),a=h+(2128609*l>>20),s<<24|(e=Math.max(0,Math.min(e,255)))<<16|(o=Math.max(0,Math.min(o,255)))<<8|(a=Math.max(0,Math.min(a,255)))},e.toString=function(){return"[ColorGeom]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).inner=null,e.border=null,e.borderHighlight=null,e.left=null,e.right=null,e.horizontal=null,e.leftSlope=null,e.rightSlope=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(22);(e=(s=function(i,t){this.initialize(i,t)}).prototype).x=null,e.y=null,e.canvas=null,e.initialize=function(i,t){if(!i)throw new Error("Primitive is not defined");var n=t||new o;return this.canvas=i.canvas,this.x=i.matrix.tx+n.x-n.y,this.y=i.matrix.ty+Math.floor(n.x/2+n.y/2)-n.z,this},e.toString=function(){return"[PixelObject]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("xAxis and yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[SlopeDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s,e,o){this.initialize(i,t,n,s,e,o)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s,e,o){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?13225936:n),this.right=a.get32(void 0===s?15132905:s),this.leftSlope=a.get32(void 0===e?14408667:e),this.rightSlope=a.get32(void 0===o?14408667:o),this},e.getByHorizontalColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),a.applyBrightness(i,1.5*this.BRIGHTNESS_GAIN),a.applyBrightness(i,.5*this.BRIGHTNESS_GAIN))},e.toString=function(){return"[SlopeColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.zAxis=t||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideXDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.yAxis=i||30,this.zAxis=t||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideYDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i){return this.border=a.get32(void 0===i?8882055:i),this},e.toString=function(){return"[LineColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[BrickDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(i,t){this.initialize(i,t)}).prototype).x=0,e.y=0,e.initialize=function(i,t){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this},e.toString=function(){return"[Point x : "+this.x+", y : "+this.y+"]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(13),a=n(7),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.zAxis+this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(0,i=this.dimension.zAxis,t=this.dimension.xAxis-1,n=this.h-this.dimension.zAxis-1,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(0+s,i+Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n-Math.floor(s/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i-e,o),this.bitmapData.setPixel(t,n+e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideX]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(14),a=n(7),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.zAxis+this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(0,i=this.h-this.dimension.zAxis-1,t=this.dimension.yAxis-1,n=this.dimension.zAxis,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.yAxis;s+=1)this.bitmapData.setPixel(0+s,i-Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n+Math.floor(s/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i+e,o),this.bitmapData.setPixel(t,n-e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideY]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new o).initialize=function(i,t,n){if(this.xAxis=i||30,this.yAxis=t||30,this.zAxis=n||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[CubeDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s,e){this.initialize(i,t,n,s,e)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s,e){return this.border=a.get32(void 0===i?8882055:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?13225936:n),this.right=a.get32(void 0===s?14935011:s),this.horizontal=a.get32(void 0===e?15658992:e),this},e.getByHorizontalColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[CubeColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(17);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype).x=0,e.y=0,e.z=0,e.initialize=function(i,t,n){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this.z=void 0===n?0:n,this},e.toGlobalCoordinates=function(i){var t=new o(this.x-this.y,Math.floor(this.x/2+this.y/2)-this.z);return void 0!==i&&(t.x=t.x+i.x,t.y=t.y+i.y),t},e.toString=function(){return"[Point3D x : "+this.x+", y : "+this.y+", z: "+this.z+"]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("CanvasManager is a static Class, cannot be instanced.")}).defaultCanvas=null,e.getDefaultCanvas=function(){return e.defaultCanvas=e.defaultCanvas||document.createElement("canvas"),e.defaultCanvas},e.getNewCanvas=function(){return document.createElement("canvas")},e.toString=function(){return"[CanvasManager]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(16),a=n(7),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(i=this.dimension.yAxis-2,0,t=this.dimension.xAxis-1,n=this.h-1,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(i+s,0+Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n-Math.floor(s/2),o);for(e=0;e<this.dimension.yAxis;e+=1)this.bitmapData.setPixel(i+1-e,0+Math.floor(e/2),o),this.bitmapData.setPixel(t-1+e,n-Math.floor(e/2),o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[Brick]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=i||30,this.tall=t||!1,this.xAxis%2==1)throw new Error("axis must be even number");if(this.xAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[PyramidDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?15132905:n),this.right=a.get32(void 0===s?15658992:s),this},e.getByRightColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[PyramidColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.xAxis=i||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineXDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.yAxis=i||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineYDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.zAxis=i||30,this.zAxis<=0)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineZDimension]"},i.exports=s},,function(i,t,n){(function(n){var s,e,o;e=[],void 0===(o="function"==typeof(s=function(){"use strict";function t(i,t,n){var s=new XMLHttpRequest;s.open("GET",i),s.responseType="blob",s.onload=function(){h(s.response,t,n)},s.onerror=function(){console.error("could not download file")},s.send()}function s(i){var t=new XMLHttpRequest;t.open("HEAD",i,!1);try{t.send()}catch(i){}return 200<=t.status&&299>=t.status}function e(i){try{i.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),i.dispatchEvent(t)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,a=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),h=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(i,n,a){var h=o.URL||o.webkitURL,r=document.createElement("a");n=n||i.name||"download",r.download=n,r.rel="noopener","string"==typeof i?(r.href=i,r.origin===location.origin?e(r):s(r.href)?t(i,n,a):e(r,r.target="_blank")):(r.href=h.createObjectURL(i),setTimeout((function(){h.revokeObjectURL(r.href)}),4e4),setTimeout((function(){e(r)}),0))}:"msSaveOrOpenBlob"in navigator?function(i,n,o){if(n=n||i.name||"download","string"!=typeof i)navigator.msSaveOrOpenBlob(function(i,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(i.type)?new Blob(["\ufeff",i],{type:i.type}):i}(i,o),n);else if(s(i))t(i,n,o);else{var a=document.createElement("a");a.href=i,a.target="_blank",setTimeout((function(){e(a)}))}}:function(i,n,s,e){if((e=e||open("","_blank"))&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof i)return t(i,n,s);var h="application/octet-stream"===i.type,r=/constructor/i.test(o.HTMLElement)||o.safari,l=/CriOS\/[\d]+/.test(navigator.userAgent);if((l||h&&r||a)&&"undefined"!=typeof FileReader){var c=new FileReader;c.onloadend=function(){var i=c.result;i=l?i:i.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=i:location=i,e=null},c.readAsDataURL(i)}else{var u=o.URL||o.webkitURL,x=u.createObjectURL(i);e?e.location=x:location.href=x,e=null,setTimeout((function(){u.revokeObjectURL(x)}),4e4)}});o.saveAs=h.saveAs=h,i.exports=h})?s.apply(t,e):s)||(i.exports=o)}).call(this,n(32))},function(i,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(i){"object"==typeof window&&(n=window)}i.exports=n},function(i,t,n){"use strict";var s={};s.Cube=n(34),s.Brick=n(24),s.Pyramid=n(35),s.LineX=n(36),s.LineY=n(37),s.LineZ=n(38),s.SideX=n(18),s.SideY=n(19),s.SlopeEast=n(39),s.SlopeNorth=n(40),s.SlopeSouth=n(41),s.SlopeWest=n(42),s.ColorPattern=n(43),s.ColorGeom=n(8),s.CanvasManager=n(23),s.CanvasTool=n(44),s.Matrix=n(2),s.Point=n(17),s.Point3D=n(22),s.PixelView=n(45),s.PixelObject=n(10),s.BitmapData=n(3),s.BrickDimension=n(16),s.CubeDimension=n(20),s.PyramidDimension=n(25),s.LineXDimension=n(27),s.LineYDimension=n(28),s.LineZDimension=n(29),s.SideXDimension=n(13),s.SideYDimension=n(14),s.SlopeDimension=n(11),s.LineColor=n(15),s.CubeColor=n(21),s.PyramidColor=n(26),s.SideColor=n(7),s.SlopeColor=n(12),window.obelisk=s,i.exports=s},function(i,t,n){"use strict";var s,e,o=n(20),a=n(16),h=n(13),r=n(14),l=n(21),c=n(7),u=n(2),x=n(10),d=n(3),m=n(4),f=n(24),p=n(18),v=n(19);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new m).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new l:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.zAxis+(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new u,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new d(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,l,u,m,b,A,w,g;if(i=new f(new a(this.dimension.xAxis,this.dimension.yAxis),new c(this.color.border,this.color.horizontal),this.border),t=new p(new h(this.dimension.xAxis,this.dimension.zAxis),new c(this.color.border,this.color.left),this.border),n=new v(new r(this.dimension.yAxis,this.dimension.zAxis),new c(this.color.border,this.color.right),this.border),s=new x(i),e=new x(t),o=new x(n),(l=this.bitmapData.context).drawImage(s.canvas,s.x+this.dimension.yAxis-2,s.y),l.drawImage(e.canvas,e.x,e.y+this.dimension.zAxis+this.dimension.yAxis/2-1),l.drawImage(o.canvas,o.x+this.w-2,e.y+this.dimension.zAxis+this.dimension.xAxis/2-1),u=new d(this.w,this.h),this.border){for(m=this.dimension.xAxis-2,b=(this.dimension.xAxis+this.dimension.yAxis)/2-2,A=0;A<this.dimension.xAxis-2;A+=1)u.setPixel(m+1-A,b-Math.floor(A/2),this.color.borderHighlight);for(w=0;w<this.dimension.yAxis-2;w+=1)u.setPixel(m+w,b-Math.floor(w/2),this.color.borderHighlight);for(g=0;g<this.dimension.zAxis;g+=1)u.setPixel(m,b+g,this.color.borderHighlight)}else for(A=0;A<this.dimension.zAxis;A+=1)u.setPixel(this.dimension.xAxis-2,(this.dimension.xAxis+this.dimension.yAxis)/2-1+A,this.color.left);u.context.putImageData(u.imageData,0,0),l.drawImage(u.canvas,0,0)},e.toString=function(){return"[Cube]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(25),a=n(26),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).hSize=null,e.hOffset=null,e.initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t,this.hSize=this.dimension.tall?2*this.dimension.xAxis:this.dimension.xAxis,this.hOffset=this.dimension.tall?-3:-2},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.hSize+this.dimension.xAxis/2,this.w-=2,this.h+=this.hOffset,this.matrix=new h,this.matrix.tx=2-this.dimension.xAxis,this.matrix.ty=-this.hSize/2+2-(this.dimension.tall?this.dimension.xAxis/2:1)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,r,l;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:i,o=0;o<this.hSize+this.dimension.xAxis/2-4;o+=1)this.bitmapData.setPixel(this.dimension.xAxis-2,o+3+this.hOffset,n);for(s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(s,this.hSize+Math.floor(s/2)+this.hOffset,i);for(e=0;e<this.dimension.xAxis;e+=1)this.bitmapData.setPixel(e+this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-Math.floor(e/2)-1+this.hOffset,t);if(this.dimension.tall){for(r=0;r<this.hSize-2;r+=1)this.bitmapData.setPixel(Math.floor(r/2),this.hSize-r+this.hOffset,i);for(l=2;l<this.hSize;l+=1)this.bitmapData.setPixel(Math.floor(l/2)+this.dimension.xAxis-2,l+1+this.hOffset,t)}else{for(a=0;a<this.hSize;a+=1)this.bitmapData.setPixel(a,this.hSize-a+this.hOffset,i);for(h=0;h<this.hSize;h+=1)this.bitmapData.setPixel(h+this.hSize-2,h+1+this.hOffset,t)}this.border||this.bitmapData.setPixel(this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-1+this.hOffset,i),this.bitmapData.floodFill(this.dimension.xAxis-1,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-1,this.color.right),this.bitmapData.floodFill(this.dimension.xAxis-3,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-2,this.color.left)},e.toString=function(){return"[Pyramid]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(27),a=n(15),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.xAxis;i+=1)this.bitmapData.setPixel(0+i,0+Math.floor(i/2),t)},e.toString=function(){return"[LineX]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(28),a=n(15),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n;for(i=this.dimension.yAxis-1,0,n=this.color.border,t=0;t<this.dimension.yAxis;t+=1)console.log(t),this.bitmapData.setPixel(i-t,0+Math.floor(t/2),n)},e.toString=function(){return"[LineY]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(29),a=n(15),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=1,this.h=this.dimension.zAxis,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=1-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.zAxis;i+=1)this.bitmapData.setPixel(0,0+i,t)},e.toString=function(){return"[LineZ]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=2*this.dimension.xAxis+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.xAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.rightSlope,s=0;s<this.dimension.yAxis;s+=1)this.bitmapData.setPixel(s,this.dimension.yAxis/2-Math.floor(s/2)-1,t),this.bitmapData.setPixel(s+this.dimension.xAxis-2,this.h-Math.floor(s/2)-1,t);for(n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(n,this.h-this.dimension.xAxis/2+Math.floor(n/2),i);for(e=this.dimension.yAxis/2-1;e<this.h-this.dimension.xAxis/2;e+=1)this.bitmapData.setPixel(0,e,i);for(o=0;o<2*this.dimension.xAxis-2;o+=1)this.bitmapData.setPixel(this.dimension.yAxis-1+Math.floor(o/2),o,t),this.bitmapData.setPixel(1+Math.floor(o/2),this.dimension.yAxis/2+o-1,t);if(this.bitmapData.floodFill(this.dimension.yAxis-2,1,this.color.rightSlope),this.bitmapData.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),this.bitmapData.setPixel(this.dimension.xAxis-2,this.h-2,this.color.left),this.border)for(a=1;a<2*this.dimension.xAxis-3;a+=1)this.bitmapData.setPixel(1+Math.floor(a/2),this.dimension.yAxis/2+a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeEast]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(2),r=n(3),l=n(4),c=n(18),u=n(13),x=n(7),d=n(10);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.yAxis/2+this.dimension.xAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.yAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,l,m;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:this.color.left,s=new c(new u(this.dimension.xAxis,this.h-this.dimension.xAxis/2),new x(i,this.color.left)),e=new d(s),(o=this.bitmapData.context).drawImage(e.canvas,e.x,e.y+this.h-this.dimension.xAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.yAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-1,h,t);for(l=1;l<this.dimension.yAxis;l+=1)a.setPixel(this.dimension.xAxis+l-2,this.h-Math.floor(l/2)-1,t),a.setPixel(this.dimension.xAxis+l-2,this.dimension.xAxis/2-2+l,t);for(a.floodFill(this.dimension.xAxis+1,this.h-3,this.color.right),m=this.dimension.xAxis/2;m<this.h-1;m+=1)a.setPixel(this.dimension.xAxis-1,m,this.color.right),a.setPixel(this.dimension.xAxis-2,m,n);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeNorth]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(2),r=n(3),l=n(4);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.xAxis/2+2*this.dimension.yAxis,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.yAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a;for(i=this.border?this.color.border:this.color.leftSlope,t=this.border?this.color.border:this.color.right,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(s,2*this.dimension.yAxis+Math.floor(s/2)-3,i),this.bitmapData.setPixel(s+this.dimension.yAxis-2,Math.floor(s/2),i);for(n=0;n<this.dimension.yAxis;n+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+n,this.h-Math.floor(n/2)-1,t);for(e=this.dimension.xAxis/2-1;e<this.h-this.dimension.yAxis/2;e+=1)this.bitmapData.setPixel(this.w-1,e,t);for(o=0;o<2*this.dimension.yAxis-2;o+=1)this.bitmapData.setPixel(Math.floor(o/2),2*this.dimension.yAxis-o-3,i),this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(o/2),this.h-o-1,i);if(this.bitmapData.floodFill(this.dimension.yAxis-1,1,this.color.leftSlope),this.bitmapData.floodFill(this.dimension.xAxis,this.h-3,this.color.right),this.bitmapData.setPixel(this.dimension.xAxis-1,this.h-2,this.color.right),this.border)for(a=1;a<2*this.dimension.yAxis-3;a+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(a/2),this.h-a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeSouth]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(2),r=n(3),l=n(4),c=n(19),u=n(14),x=n(7),d=n(10);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.xAxis/2+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.xAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,l,m;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:this.color.left,s=new c(new u(this.dimension.yAxis,this.h-this.dimension.yAxis/2),new x(t,this.color.right)),e=new d(s),(o=this.bitmapData.context).drawImage(e.canvas,e.x+this.w-2,e.y+this.h-this.dimension.yAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.xAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-2,h,i);for(l=0;l<this.dimension.xAxis-1;l+=1)a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3+Math.floor(l/2),i),a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3-l,i);for(a.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),m=this.dimension.yAxis/2;m<this.h-1;m+=1)a.setPixel(this.dimension.xAxis-2,m,n);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeWest]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("ColorPattern is a static Class, cannot be instanced.")}).GRASS_GREEN=13434624,e.YELLOW=16776960,e.WINE_RED=16711833,e.PINK=16743615,e.PURPLE=13369599,e.BLUE=52479,e.GRAY=15658734,e.BLACK=6710886,e.FINE_COLORS=[e.GRASS_GREEN,e.YELLOW,e.WINE_RED,e.PINK,e.PURPLE,e.BLUE,e.GRAY,e.BLACK],e.getRandomComfortableColor=function(){return e.FINE_COLORS[Math.floor(Math.random()*e.FINE_COLORS.length)]},e.toString=function(){return"[ColorPattern]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("CanvasTool is a static Class, cannot be instanced.")}).getPixel=function(i,t,n){var s,e;return(s=i.data)[e=4*(n*i.width+t)]<<16|s[e+1]<<8|s[e+2]},e.toString=function(){return"[CanvasTool]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(17),a=n(10);(e=(s=function(i,t){this.initialize(i,t)}).prototype).canvas=null,e.context=null,e.point=null,e.initialize=function(i,t){if(!i)throw new Error("Canvas is not defined");try{i instanceof jQuery&&(i=i.get(0))}catch(i){}return this.canvas=i,this.context=this.canvas.getContext("2d"),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.point=t||new o(0,0),this},e.renderObject=function(i,t){var n=new a(i,t);this.context.drawImage(n.canvas,this.point.x+n.x,this.point.y+n.y)},e.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.toString=function(){return"[PixelView]"},i.exports=s},function(i,t){i.exports=function(i){if(!i.webpackPolyfill){var t=Object.create(i);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZ2VvbS9NYXRyaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2Rpc3BsYXkvQml0bWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9BYnN0cmFjdFByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGltZW5zaW9ucy9BYnN0cmFjdERpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL1NpZGVDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvdXRpbHMvQ29sb3JHZW9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9jb2xvcnMvQWJzdHJhY3RDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGlzcGxheS9QaXhlbE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGltZW5zaW9ucy9TbG9wZURpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL1Nsb3BlQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvU2lkZVlEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2NvbG9ycy9MaW5lQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2dlb20vUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2lkZVguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2lkZVkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvQ3ViZURpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL0N1YmVDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZ2VvbS9Qb2ludDNELmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy91dGlscy9DYW52YXNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0JyaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9kaW1lbnNpb25zL1B5cmFtaWREaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2NvbG9ycy9QeXJhbWlkQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVhEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVlEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVpEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL29iZWxpc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvQ3ViZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9QeXJhbWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVYLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVZLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVaLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL1Nsb3BlRWFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9TbG9wZU5vcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL1Nsb3BlU291dGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2xvcGVXZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy91dGlscy9Db2xvclBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3V0aWxzL0NhbnZhc1Rvb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2Rpc3BsYXkvUGl4ZWxWaWV3LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyJdLCJuYW1lcyI6WyJNYXRyaXgiLCJwIiwiYSIsImIiLCJjIiwiZCIsInR4IiwidHkiLCJ0aGlzIiwiaW5pdGlhbGl6ZSIsInByb3RvdHlwZSIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkJpdG1hcERhdGEiLCJDYW52YXNNYW5hZ2VyIiwidyIsImgiLCJ1c2VEZWZhdWx0Q2FudmFzIiwiaW1hZ2VEYXRhIiwiY2FudmFzIiwiY29udGV4dCIsIkVycm9yIiwiZ2V0RGVmYXVsdENhbnZhcyIsImdldE5ld0NhbnZhcyIsInNldEF0dHJpYnV0ZSIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiY3JlYXRlSW1hZ2VEYXRhIiwic2V0UGl4ZWwiLCJwb3NYIiwicG9zWSIsImNvbG9yIiwiaW5kZXgiLCJzZXRQaXhlbEJ5SW5kZXgiLCJwaXhlbHMiLCJkYXRhIiwiY2hlY2tQaXhlbEF2YWlsYWJsZSIsIngiLCJ5IiwiZmxvb2RGaWxsIiwiY29sIiwicm93IiwibWF0Y2hGbGFnIiwiaSIsImoiLCJzdGFjayIsIm5vd0NvbCIsInByZXZDb2wiLCJwdXNoIiwiY29uY2F0IiwibGVuZ3RoIiwiQWJzdHJhY3RQcmltaXRpdmUiLCJkaW1lbnNpb24iLCJib3JkZXIiLCJiaXRtYXBEYXRhIiwibWF0cml4IiwiQWJzdHJhY3REaW1lbnNpb24iLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJ0YWxsIiwiU2lkZUNvbG9yIiwiQWJzdHJhY3RDb2xvciIsIkNvbG9yR2VvbSIsImlubmVyIiwiQlJJR0hUTkVTU19HQUlOIiwiZ2V0MzIiLCJnZXRCeUlubmVyQ29sb3IiLCJhcHBseUJyaWdodG5lc3MiLCJicmlnaHRuZXNzIiwiaGlnaGxpZ2h0IiwiciIsImciLCJ2IiwidSIsIk1hdGgiLCJwb3ciLCJtYXgiLCJtaW4iLCJib3JkZXJIaWdobGlnaHQiLCJsZWZ0IiwicmlnaHQiLCJob3Jpem9udGFsIiwibGVmdFNsb3BlIiwicmlnaHRTbG9wZSIsIlBpeGVsT2JqZWN0IiwiUG9pbnQzRCIsInByaW1pdGl2ZSIsInBvaW50M0QiLCJwM0QiLCJmbG9vciIsInoiLCJTbG9wZURpbWVuc2lvbiIsIlNsb3BlQ29sb3IiLCJnZXRCeUhvcml6b250YWxDb2xvciIsIlNpZGVYRGltZW5zaW9uIiwiU2lkZVlEaW1lbnNpb24iLCJMaW5lQ29sb3IiLCJCcmlja0RpbWVuc2lvbiIsIlBvaW50IiwiU2lkZVgiLCJpbml0UmVuZGVyIiwiaW5pdFJlY3RhbmdsZSIsImluaXRCaXRtYXBEYXRhIiwiYnVpbGQiLCJyZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzIiwicHV0SW1hZ2VEYXRhIiwieU9mZnNldElubmVyIiwieE9mZnNldE91dCIsInlPZmZzZXRPdXQiLCJib3JkZXJDb2xvciIsIlNpZGVZIiwiQ3ViZURpbWVuc2lvbiIsIkN1YmVDb2xvciIsInRvR2xvYmFsQ29vcmRpbmF0ZXMiLCJvZmZzZXQiLCJwMkQiLCJkZWZhdWx0Q2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiQnJpY2siLCJ4T2Zmc2V0SW5uZXIiLCJQeXJhbWlkRGltZW5zaW9uIiwiYXhpcyIsIlB5cmFtaWRDb2xvciIsImdldEJ5UmlnaHRDb2xvciIsIkxpbmVYRGltZW5zaW9uIiwiTGluZVlEaW1lbnNpb24iLCJMaW5lWkRpbWVuc2lvbiIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsInJlc3BvbnNlIiwib25lcnJvciIsImNvbnNvbGUiLCJlcnJvciIsInNlbmQiLCJzdGF0dXMiLCJlIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwid2luZG93IiwiZiIsInNlbGYiLCJnbG9iYWwiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50Iiwic2F2ZUFzIiwiSFRNTEFuY2hvckVsZW1lbnQiLCJVUkwiLCJ3ZWJraXRVUkwiLCJuYW1lIiwiZG93bmxvYWQiLCJyZWwiLCJocmVmIiwib3JpZ2luIiwibG9jYXRpb24iLCJ0YXJnZXQiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXRUaW1lb3V0IiwicmV2b2tlT2JqZWN0VVJMIiwibXNTYXZlT3JPcGVuQmxvYiIsImF1dG9Cb20iLCJ3YXJuIiwidHlwZSIsIkJsb2IiLCJ0aXRsZSIsImJvZHkiLCJpbm5lclRleHQiLCJIVE1MRWxlbWVudCIsInNhZmFyaSIsIkZpbGVSZWFkZXIiLCJrIiwib25sb2FkZW5kIiwicmVzdWx0IiwicmVwbGFjZSIsInJlYWRBc0RhdGFVUkwiLCJsIiwibSIsIkZ1bmN0aW9uIiwib2JlbGlzayIsIkN1YmUiLCJQeXJhbWlkIiwiTGluZVgiLCJMaW5lWSIsIkxpbmVaIiwiU2xvcGVFYXN0IiwiU2xvcGVOb3J0aCIsIlNsb3BlU291dGgiLCJTbG9wZVdlc3QiLCJDb2xvclBhdHRlcm4iLCJDYW52YXNUb29sIiwiUGl4ZWxWaWV3IiwiYnJpY2siLCJzaWRlWCIsInNpZGVZIiwicG9CcmljayIsInBvWCIsInBvWSIsImN0eCIsImJtZCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZHJhd0ltYWdlIiwiaFNpemUiLCJoT2Zmc2V0IiwiY29sb3JCb3JkZXJMZWZ0IiwiY29sb3JCb3JkZXJSaWdodCIsImNvbG9yQm9yZGVySGlnaGxpZ2h0IiwibDEiLCJtMSIsImwyIiwibTIiLCJ4T2Zmc2V0Qm9yZGVyIiwibG9nIiwibiIsIkdSQVNTX0dSRUVOIiwiWUVMTE9XIiwiV0lORV9SRUQiLCJQSU5LIiwiUFVSUExFIiwiQkxVRSIsIkdSQVkiLCJCTEFDSyIsIkZJTkVfQ09MT1JTIiwiZ2V0UmFuZG9tQ29tZm9ydGFibGVDb2xvciIsInJhbmRvbSIsImdldFBpeGVsIiwicG9pbnQiLCJqUXVlcnkiLCJnZXQiLCJpZ25vcmUiLCJyZW5kZXJPYmplY3QiLCJwbyIsImNsZWFyIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJPYmplY3QiLCJjcmVhdGUiLCJjaGlsZHJlbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSJdLCJtYXBwaW5ncyI6IndGQUlBLElBQUlBLEVBQVFDLEdBSVpBLEdBSEFELEVBQVMsU0FBVUUsRUFBR0MsRUFBR0MsRUFBR0MsRUFBR0MsRUFBSUMsR0FDL0JDLEtBQUtDLFdBQVdQLEVBQUdDLEVBQUdDLEVBQUdDLEVBQUdDLEVBQUlDLEtBRXpCRyxXQVFUUixFQUFJLEVBT05ELEVBQUVFLEVBQUksRUFPTkYsRUFBRUcsRUFBSSxFQU9OSCxFQUFFSSxFQUFJLEVBT05KLEVBQUVLLEdBQUssRUFPUEwsRUFBRU0sR0FBSyxFQUdQTixFQUFFUSxXQUFhLFNBQVVQLEVBQUdDLEVBQUdDLEVBQUdDLEVBQUdDLEVBQUlDLEdBUXJDLE9BUEFDLEtBQUtOLE9BQVdTLElBQU5ULEVBQW1CLEVBQUlBLEVBQ2pDTSxLQUFLTCxFQUFJQSxHQUFLLEVBQ2RLLEtBQUtKLEVBQUlBLEdBQUssRUFDZEksS0FBS0gsT0FBV00sSUFBTk4sRUFBbUIsRUFBSUEsRUFDakNHLEtBQUtGLEdBQUtBLEdBQU0sRUFDaEJFLEtBQUtELEdBQUtBLEdBQU0sRUFFVEMsTUFJWFAsRUFBRVcsU0FBVyxXQUNULE1BQU8sWUFHWEMsRUFBT0MsUUFBVWQsRyw2QkNsRWpCLElBRUllLEVBQVlkLEVBRlplLEVBQWdCLEVBQVEsS0FNNUJmLEdBSEFjLEVBQWEsU0FBVUUsRUFBR0MsRUFBR0MsR0FDekJYLEtBQUtDLFdBQVdRLEVBQUdDLEVBQUdDLEtBRVhULFdBR2JVLFVBQVksS0FDZG5CLEVBQUVvQixPQUFTLEtBQ1hwQixFQUFFcUIsUUFBVSxLQUdackIsRUFBRVEsV0FBYSxTQUFVUSxFQUFHQyxFQUFHQyxHQUMz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c0NvbnRlbnQiOlsiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE1hdHJpeCwgcDtcbk1hdHJpeCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoYSwgYiwgYywgZCwgdHgsIHR5KTtcbn07XG5wID0gTWF0cml4LnByb3RvdHlwZTtcblxuLy8gcHVibGljIHByb3BlcnRpZXM6XG4vKipcbiAqIFBvc2l0aW9uICgwLCAwKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgYVxuICogQHR5cGUgTnVtYmVyXG4gKiovXG5wLmEgPSAxO1xuXG4vKipcbiAqIFBvc2l0aW9uICgwLCAxKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgYlxuICogQHR5cGUgTnVtYmVyXG4gKiovXG5wLmIgPSAwO1xuXG4vKipcbiAqIFBvc2l0aW9uICgxLCAwKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgY1xuICogQHR5cGUgTnVtYmVyXG4gKiovXG5wLmMgPSAwO1xuXG4vKipcbiAqIFBvc2l0aW9uICgxLCAxKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgZFxuICogQHR5cGUgTnVtYmVyXG4gKiovXG5wLmQgPSAxO1xuXG4vKipcbiAqIFBvc2l0aW9uICgyLCAwKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgdHhcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC50eCA9IDA7XG5cbi8qKlxuICogUG9zaXRpb24gKDIsIDEpIGluIGEgM3gzIG1hdHJpeC5cbiAqIEBwcm9wZXJ0eSB0eVxuICogQHR5cGUgTnVtYmVyXG4gKiovXG5wLnR5ID0gMDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICB0aGlzLmEgPSAoYSA9PT0gdW5kZWZpbmVkKSA/IDEgOiBhO1xuICAgIHRoaXMuYiA9IGIgfHwgMDtcbiAgICB0aGlzLmMgPSBjIHx8IDA7XG4gICAgdGhpcy5kID0gKGQgPT09IHVuZGVmaW5lZCkgPyAxIDogZDtcbiAgICB0aGlzLnR4ID0gdHggfHwgMDtcbiAgICB0aGlzLnR5ID0gdHkgfHwgMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTWF0cml4XSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdHJpeDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYW52YXNNYW5hZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvQ2FudmFzTWFuYWdlcicpO1xuXG52YXIgQml0bWFwRGF0YSwgcDtcbkJpdG1hcERhdGEgPSBmdW5jdGlvbiAodywgaCwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh3LCBoLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gQml0bWFwRGF0YS5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0eVxucC5pbWFnZURhdGEgPSBudWxsO1xucC5jYW52YXMgPSBudWxsO1xucC5jb250ZXh0ID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh3LCBoLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgaWYgKHcgPT09IHVuZGVmaW5lZCB8fCBoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCaXRtYXBEYXRhIHdpZHRoIG9yIGhlaWdodCBpcyBtaXNzaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBDYW52YXNNYW5hZ2VyLmdldERlZmF1bHRDYW52YXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IENhbnZhc01hbmFnZXIuZ2V0TmV3Q2FudmFzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcpO1xuICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaCk7XG5cbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICB0aGlzLmNvbnRleHQubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5jb250ZXh0Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5pbWFnZURhdGEgPSB0aGlzLmNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHcsIGgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnNldFBpeGVsID0gZnVuY3Rpb24gKHBvc1gsIHBvc1ksIGNvbG9yKSB7XG4gICAgdmFyIGluZGV4ID0gKHBvc1kgKiB0aGlzLmltYWdlRGF0YS53aWR0aCArIHBvc1gpICogNDtcbiAgICB0aGlzLnNldFBpeGVsQnlJbmRleChpbmRleCwgY29sb3IpO1xufTtcblxucC5zZXRQaXhlbEJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGNvbG9yKSB7XG4gICAgdmFyIHBpeGVscyA9IHRoaXMuaW1hZ2VEYXRhLmRhdGE7XG5cbiAgICBwaXhlbHNbaW5kZXhdID0gKGNvbG9yID4+PiAxNikgJiAweEZGO1xuICAgIHBpeGVsc1tpbmRleCArIDFdID0gKGNvbG9yID4+PiA4KSAmIDB4RkY7XG4gICAgcGl4ZWxzW2luZGV4ICsgMl0gPSAoY29sb3IgPj4+IDApICYgMHhGRjtcbiAgICBwaXhlbHNbaW5kZXggKyAzXSA9IChjb2xvciA+Pj4gMjQpICYgMHhGRjtcbn07XG5cbnAuY2hlY2tQaXhlbEF2YWlsYWJsZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdmFyIGluZGV4ID0gKHkgKiB0aGlzLmltYWdlRGF0YS53aWR0aCArIHgpICogNDtcblxuICAgIHJldHVybiB0aGlzLmltYWdlRGF0YS5kYXRhW2luZGV4ICsgM10gPT09IDA7XG59O1xuXG5wLmZsb29kRmlsbCA9IGZ1bmN0aW9uIChwb3NYLCBwb3NZLCBjb2xvcikge1xuICAgIGlmICgoKGNvbG9yID4+PiAyNCkgJiAweEZGKSA9PT0gMHgwMCkge1xuICAgICAgICAvLyB0cmFuc3BhcmVudCBmbG9vZCBmaWxsXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgeCA9IHBvc1gsIHkgPSBwb3NZLFxuICAgICAgICBzdGFjayA9IFtdLFxuICAgICAgICBub3dDb2wgPSBbXSxcbiAgICAgICAgcHJldkNvbCA9IFtdLFxuICAgICAgICBjb2wsIHJvdywgbWF0Y2hGbGFnLCBuZXdTdGFydCxcbiAgICAgICAgdyA9IHRoaXMuaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICBoID0gdGhpcy5pbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICBpLCBqO1xuXG4gICAgLy8gYm91bmQgcmVhY2hcbiAgICBpZiAoeCA8IDAgfHwgeSA8IDAgfHwgeCA+PSB3IHx8IHkgPj0gaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZmlyc3QgcG9pbnQgY2hlY2sgZmFpbFxuICAgIGlmICghdGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKHgsIHkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhcnQgcG9pbnQgZm9yIGZsb29kIGZpbGwgaXMgYWxyZWFkeSBmaWxsZWQnKTtcbiAgICB9XG5cbiAgICAvLyBsZWZ0IHNpZGUgZmxvb2QgZmlsbFxuICAgIGZvciAoY29sID0geDsgY29sID49IDA7IGNvbCAtPSAxKSB7XG4gICAgICAgIC8vIHRvcCBzaWRlXG4gICAgICAgIGZvciAocm93ID0geTsgcm93ID49IDA7IHJvdyAtPSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBwaXhlbFxuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHJvdyAqIHcgKyBjb2wpICogNCk7XG4gICAgICAgICAgICAgICAgbm93Q29sLnB1c2gocm93KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3Qgb25lIGlzIGludmFsaWQgcGl4ZWwgJiYgbm90IGF0IGNvbCB0b3BcbiAgICAgICAgICAgICAgICBpZiAocm93ID09PSB5ICYmIHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgKyAxLCByb3cgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IG9uZSBpcyB2YWxpZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93IC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sICsgMSwgcm93IC0gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IHJvdyAtIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhaWwsIGFzc2lnbiBtYXggdmFsdWUgdG8gYXZvaWQgbG9vcCBiZWxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IG5ld1N0YXJ0OyByb3cgPj0gMDsgcm93IC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICAvLyBib3R0b20gc2lkZVxuICAgICAgICBmb3IgKHJvdyA9IHk7IHJvdyA8IGg7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBwaXhlbFxuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHJvdyAqIHcgKyBjb2wpICogNCk7XG4gICAgICAgICAgICAgICAgbm93Q29sLnB1c2gocm93KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3Qgb25lIGlzIGludmFsaWQgcGl4ZWwgJiYgbm90IGF0IGNvbCBib3R0b21cbiAgICAgICAgICAgICAgICBpZiAocm93ID09PSB5ICYmIHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgKyAxLCByb3cgKyAxKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQgb25lIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgKyAxLCByb3cgKyAyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFpbCwgYXNzaWduIG1heCB2YWx1ZSB0byBhdm9pZCBsb29wIGJlbG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSBuZXdTdGFydDsgcm93IDwgaDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGFyZSB3aXRoIHByZXZpb3VzIGNvbHVtblxuICAgICAgICAvLyBmb3IgZmlyc3QgY29sdW1uXG4gICAgICAgIC8vIHRoZSBnaXZlbiBwb2ludCBzaG91bGQgYmUgaW5zaWRlIHRoZSBjb250YWluZXJcbiAgICAgICAgaWYgKGNvbCA9PT0geCkge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoRmxhZyA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmV2Q29sLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcHJldkNvbC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChub3dDb2xbal0gPT09IHByZXZDb2xbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHByZXZDb2xbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgICAgIG5vd0NvbCA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYm91bmQgcmVhY2hcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgc3RhcnQgcG9pbnRcbiAgICB4ID0gcG9zWDtcbiAgICB5ID0gcG9zWTtcbiAgICBwcmV2Q29sID0gW107XG4gICAgbm93Q29sID0gW107XG5cbiAgICAvLyByaWdodCBzaWRlIGZsb29kIGZpbGxcbiAgICBmb3IgKGNvbCA9IHg7IGNvbCA8IHc7IGNvbCArPSAxKSB7XG5cbiAgICAgICAgLy8gdG9wIHNpZGVcbiAgICAgICAgZm9yIChyb3cgPSB5OyByb3cgPj0gMDsgcm93IC09IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCBvbmUgaXMgaW52YWxpZCBwaXhlbCAmJiBub3QgYXQgY29sIHRvcFxuICAgICAgICAgICAgICAgIGlmIChyb3cgPT09IHkgJiYgdGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCAtIDEsIHJvdyAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQgb25lIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgLSAxLCByb3cgLSAyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93IC0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFpbCwgYXNzaWduIG1heCB2YWx1ZSB0byBhdm9pZCBsb29wIGJlbG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gbmV3U3RhcnQ7IHJvdyA+PSAwOyByb3cgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdmFpbGFibGUgcGl4ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKChyb3cgKiB3ICsgY29sKSAqIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd0NvbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBib3R0b20gc2lkZVxuICAgICAgICBmb3IgKHJvdyA9IHk7IHJvdyA8IGg7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBwaXhlbFxuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHJvdyAqIHcgKyBjb2wpICogNCk7XG4gICAgICAgICAgICAgICAgbm93Q29sLnB1c2gocm93KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3Qgb25lIGlzIGludmFsaWQgcGl4ZWwgJiYgbm90IGF0IGNvbCBib3R0b21cbiAgICAgICAgICAgICAgICBpZiAocm93ID09PSB5ICYmIHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgLSAxLCByb3cgKyAxKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQgb25lIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgLSAxLCByb3cgKyAyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFpbCwgYXNzaWduIG1heCB2YWx1ZSB0byBhdm9pZCBsb29wIGJlbG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSBuZXdTdGFydDsgcm93IDwgaDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGFyZSB3aXRoIHByZXZpb3VzIGNvbHVtblxuICAgICAgICAvLyBmb3IgZmlyc3QgY29sdW1uXG4gICAgICAgIC8vIHRoZSBnaXZlbiBwb2ludCBzaG91bGQgYmUgaW5zaWRlIHRoZSBjb250YWluZXJcbiAgICAgICAgaWYgKGNvbCA9PT0geCkge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoRmxhZyA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmV2Q29sLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcHJldkNvbC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChub3dDb2xbal0gPT09IHByZXZDb2xbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHByZXZDb2xbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgICAgIG5vd0NvbCA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYm91bmQgcmVhY2hcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmlsbCBpbWFnZSBkYXRhXG4gICAgZm9yIChpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2V0UGl4ZWxCeUluZGV4KHN0YWNrW2ldLCBjb2xvcik7XG4gICAgfVxufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tCaXRtYXBEYXRhXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdG1hcERhdGE7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3RQcmltaXRpdmUsIHA7XG5BYnN0cmFjdFByaW1pdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbn07XG5wID0gQWJzdHJhY3RQcmltaXRpdmUucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuLyoqXG4gKiB0aGUgY2FudmFzIGZvciBkcmF3SW1hZ2UgdG8gYW55IGNhbnZhc1xuICovXG5wLmNhbnZhcyA9IG51bGw7XG5cbi8vIHByb3RlY3QgcHJvcGVydGllc1xuLyoqXG4gKiB0aGUgd2lkdGggb2YgdGhlIGJpdG1hcCBpbiAyZCBmbGFzaCBjb29yZGluYXRlXG4gKi9cbnAudyA9IG51bGw7XG5cbi8qKlxuICogdGhlIGhlaWdodCBvZiB0aGUgYml0bWFwIGluIDJkIGZsYXNoIGNvb3JkaW5hdGVcbiAqL1xucC5oID0gbnVsbDtcblxuLyoqXG4gKiB0aGUgZGltZW5zaW9uIG9mIHByaW1pdGl2ZSBpbiAzZCBwaXhlbCBjb29yZGluYXRlXG4gKi9cbnAuZGltZW5zaW9uID0gbnVsbDtcblxuLyoqXG4gKiB0aGUgY29sb3Igb2JqIG9mIHRoZSBwcmltaXRpdmVcbiAqL1xucC5jb2xvciA9IG51bGw7XG5cbi8qKlxuICogdGhlIGJvcmRlciBvcHRpb24gb2YgdGhlIHByaW1pdGl2ZVxuICovXG5wLmJvcmRlciA9IG51bGw7XG5cbi8qKlxuICogdGhlIHNvdXJjZSBiaXRtYXBkYXRhIGNvbnRhaW5zIHBpeGVsIGdyYXBoaWNcbiAqL1xucC5iaXRtYXBEYXRhID0gbnVsbDtcblxuLyoqXG4gKiB0aGUgcHJlc2VydmUgY2FudmFzIG9wdGlvblxuICovXG5wLnVzZURlZmF1bHRDYW52YXMgPSBudWxsO1xuXG4vKipcbiAqIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICovXG5wLm1hdHJpeCA9IG51bGw7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tBYnN0cmFjdFByaW1pdGl2ZV0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdFByaW1pdGl2ZTtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiwgcDtcbkFic3RyYWN0RGltZW5zaW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xufTtcbnAgPSBBYnN0cmFjdERpbWVuc2lvbi5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG4vKipcbiAqIFRoZSB4IEF4aXMgZGltZW5zaW9ucyBpbiAyMi42IGRlZ3JlZXMgY29vcmRpbmF0ZVxuICovXG5wLnhBeGlzID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgeSBBeGlzIGRpbWVuc2lvbnMgaW4gMjIuNiBkZWdyZWVzIGNvb3JkaW5hdGVcbiAqL1xucC55QXhpcyA9IG51bGw7XG5cbi8qKlxuICogVGhlIHogQXhpcyBkaW1lbnNpb25zIGluIDIyLjYgZGVncmVlcyBjb29yZGluYXRlXG4gKi9cbnAuekF4aXMgPSBudWxsO1xuXG4vKipcbiAqIFB5cmFtaWQgdGFsbCBtb2RlXG4gKi9cbnAudGFsbCA9IGZhbHNlO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbQWJzdHJhY3REaW1lbnNpb25dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3REaW1lbnNpb247XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3RDb2xvciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RDb2xvcicpO1xudmFyIENvbG9yR2VvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL0NvbG9yR2VvbScpO1xuXG52YXIgU2lkZUNvbG9yLCBwO1xuU2lkZUNvbG9yID0gZnVuY3Rpb24gKGJvcmRlciwgaW5uZXIpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoYm9yZGVyLCBpbm5lcik7XG59O1xucCA9IFNpZGVDb2xvci5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RDb2xvcigpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5CUklHSFRORVNTX0dBSU4gPSAtMjA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9yZGVyLCBpbm5lcikge1xuICAgIHRoaXMuYm9yZGVyID0gQ29sb3JHZW9tLmdldDMyKGJvcmRlciA9PT0gdW5kZWZpbmVkID8gMHg4Nzg3ODcgOiBib3JkZXIpO1xuICAgIHRoaXMuaW5uZXIgPSBDb2xvckdlb20uZ2V0MzIoaW5uZXIgPT09IHVuZGVmaW5lZCA/IDB4RUVFRUVFIDogaW5uZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXRCeUlubmVyQ29sb3IgPSBmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICByZXR1cm4gbmV3IFNpZGVDb2xvcihcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhpbm5lciwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiA0KSxcbiAgICAgICAgaW5uZXJcbiAgICApO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTaWRlQ29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lkZUNvbG9yO1xuIiwi77u/Lypqc2xpbnQgbm9kZTp0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JHZW9tLCBwO1xuXG5Db2xvckdlb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvckdlb20gaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENvbG9yR2VvbTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAuZ2V0MzIgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gY29sb3IgPCAweEZGMDAwMDAwID8gKGNvbG9yICsgMHhGRjAwMDAwMCkgOiBjb2xvcjtcbn07XG5cbnAuYXBwbHlCcmlnaHRuZXNzID0gZnVuY3Rpb24gKGNvbG9yLCBicmlnaHRuZXNzLCBoaWdobGlnaHQpIHtcbiAgICB2YXIgYSwgciwgZywgYiwgeSwgdiwgdTtcblxuICAgIGEgPSAoKGNvbG9yID4+PiAyNCkgJiAweDAwMDAwMEZGKTtcbiAgICByID0gKChjb2xvciA+Pj4gMTYpICYgMHgwMDAwMDBGRik7XG4gICAgZyA9ICgoY29sb3IgPj4+IDgpICYgMHgwMDAwMDBGRik7XG4gICAgYiA9IChjb2xvciAmIDB4MDAwMDAwRkYpO1xuXG4gICAgeSA9ICgociAqIDMxMzUyNCkgPj4gMjApICsgKChnICogNjE1NTE0KSA+PiAyMCkgKyAoKGIgKiAxMTk1MzgpID4+IDIwKTtcbiAgICB1ID0gLSgoMTU1MTg5ICogcikgPj4gMjApIC0gKCgzMDMwMzggKiBnKSA+PiAyMCkgKyAoKDQ1ODIyNyAqIGIpID4+IDIwKTtcbiAgICB2ID0gKCg2NDQ4NzQgKiByKSA+PiAyMCkgLSAoKDU0MDAxNiAqIGcpID4+IDIwKSAtICgoMTA0ODU3ICogYikgPj4gMjApO1xuXG4gICAgaWYgKCFoaWdobGlnaHQpIHtcbiAgICAgICAgeSArPSBicmlnaHRuZXNzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSA2MCArIE1hdGgucG93KHksIDEuMik7XG4gICAgfVxuXG4gICAgciA9IHkgKyAoKDExOTUzNzYgKiB2KSA+PiAyMCk7XG4gICAgZyA9IHkgLSAoKDQwODk0NCAqIHUpID4+IDIwKSAtICgoNjA4MTc0ICogdikgPj4gMjApO1xuICAgIGIgPSB5ICsgKCgyMTI4NjA5ICogdSkgPj4gMjApO1xuXG4gICAgciA9IE1hdGgubWF4KDAsIE1hdGgubWluKHIsIDI1NSkpO1xuICAgIGcgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihnLCAyNTUpKTtcbiAgICBiID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYiwgMjU1KSk7XG5cbiAgICByZXR1cm4gKGEgPDwgMjQpIHwgKHIgPDwgMTYpIHwgKGcgPDwgOCkgfCBiO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDb2xvckdlb21dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sb3JHZW9tO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0Q29sb3IsIHA7XG5cbkFic3RyYWN0Q29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG59O1xucCA9IEFic3RyYWN0Q29sb3IucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuLyoqXG4gKiBUaGUgaW5uZXIgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLmlubmVyID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgYm9yZGVyIGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5ib3JkZXIgPSBudWxsO1xuXG4vKipcbiAqIFRoZSBib3JkZXJIaWdobGlnaHQgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLmJvcmRlckhpZ2hsaWdodCA9IG51bGw7XG5cbi8qKlxuICogVGhlIGxlZnQgc2lkZSBjb2xvcnMgZm9yIGVsZW1lbnRzIG9mIGNlcnRhaW4gcHJpbWl0aXZlXG4gKi9cbnAubGVmdCA9IG51bGw7XG5cbi8qKlxuICogVGhlIHJpZ2h0IHNpZGUgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLnJpZ2h0ID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgaG9yaXpvbnRhbCBjb2xvcnMgZm9yIGVsZW1lbnRzIG9mIGNlcnRhaW4gcHJpbWl0aXZlXG4gKi9cbnAuaG9yaXpvbnRhbCA9IG51bGw7XG5cbi8qKlxuICogVGhlIGxlZnQgc2xvdCBzaWRlIGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5sZWZ0U2xvcGUgPSBudWxsO1xuXG4vKipcbiAqIFRoZSByaWdodCBzbG90IHNpZGUgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLnJpZ2h0U2xvcGUgPSBudWxsO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbQWJzdHJhY3RDb2xvcl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdENvbG9yO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvaW50M0QgPSByZXF1aXJlKCcuLi9nZW9tL1BvaW50M0QnKTtcblxudmFyIFBpeGVsT2JqZWN0LCBwO1xuUGl4ZWxPYmplY3QgPSBmdW5jdGlvbiAocHJpbWl0aXZlLCBwb2ludDNEKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHByaW1pdGl2ZSwgcG9pbnQzRCk7XG59O1xucCA9IFBpeGVsT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAueCA9IG51bGw7XG5wLnkgPSBudWxsO1xucC5jYW52YXMgPSBudWxsO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHByaW1pdGl2ZSwgcG9pbnQzRCkge1xuICAgIGlmICghcHJpbWl0aXZlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJpbWl0aXZlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIHAzRCA9IHBvaW50M0QgfHwgbmV3IFBvaW50M0QoKTtcblxuICAgIHRoaXMuY2FudmFzID0gcHJpbWl0aXZlLmNhbnZhcztcbiAgICB0aGlzLnggPSBwcmltaXRpdmUubWF0cml4LnR4ICsgcDNELnggLSBwM0QueTtcbiAgICB0aGlzLnkgPSBwcmltaXRpdmUubWF0cml4LnR5ICsgTWF0aC5mbG9vcihwM0QueCAvIDIgKyBwM0QueSAvIDIpIC0gcDNELno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUGl4ZWxPYmplY3RdJztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kc1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBpeGVsT2JqZWN0O1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgU2xvcGVEaW1lbnNpb24sIHA7XG5TbG9wZURpbWVuc2lvbiA9IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoeEF4aXMsIHlBeGlzKTtcbn07XG5wID0gU2xvcGVEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzKSB7XG4gICAgdGhpcy54QXhpcyA9IHhBeGlzIHx8IDMwO1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnhBeGlzICUgMiA9PT0gMSB8fCB0aGlzLnlBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3hBeGlzIGFuZCB5QXhpcyBtdXN0IGJlIGV2ZW4gbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMueEF4aXMgPD0gNCB8fCB0aGlzLnlBeGlzIDw9IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlRGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0Q29sb3IgPSByZXF1aXJlKCcuL0Fic3RyYWN0Q29sb3InKTtcbnZhciBDb2xvckdlb20gPSByZXF1aXJlKCcuLi91dGlscy9Db2xvckdlb20nKTtcblxudmFyIFNsb3BlQ29sb3IsIHA7XG5TbG9wZUNvbG9yID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgbGVmdFNsb3BlLCByaWdodFNsb3BlKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgbGVmdFNsb3BlLCByaWdodFNsb3BlKTtcbn07XG5wID0gU2xvcGVDb2xvci5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RDb2xvcigpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5CUklHSFRORVNTX0dBSU4gPSAtMjA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9yZGVyLCBib3JkZXJIaWdobGlnaHQsIGxlZnQsIHJpZ2h0LCBsZWZ0U2xvcGUsIHJpZ2h0U2xvcGUpIHtcbiAgICB0aGlzLmJvcmRlciA9IENvbG9yR2VvbS5nZXQzMihib3JkZXIgPT09IHVuZGVmaW5lZCA/IDB4OTQ5Njk4IDogYm9yZGVyKTtcbiAgICB0aGlzLmJvcmRlckhpZ2hsaWdodCA9IENvbG9yR2VvbS5nZXQzMihib3JkZXJIaWdobGlnaHQgPT09IHVuZGVmaW5lZCA/IDB4RkZGRkZGIDogYm9yZGVySGlnaGxpZ2h0KTtcbiAgICB0aGlzLmxlZnQgPSBDb2xvckdlb20uZ2V0MzIobGVmdCA9PT0gdW5kZWZpbmVkID8gMHhDOUNGRDAgOiBsZWZ0KTtcbiAgICB0aGlzLnJpZ2h0ID0gQ29sb3JHZW9tLmdldDMyKHJpZ2h0ID09PSB1bmRlZmluZWQgPyAweEU2RThFOSA6IHJpZ2h0KTtcbiAgICB0aGlzLmxlZnRTbG9wZSA9IENvbG9yR2VvbS5nZXQzMihsZWZ0U2xvcGUgPT09IHVuZGVmaW5lZCA/IDB4REJEQkRCIDogbGVmdFNsb3BlKTtcbiAgICB0aGlzLnJpZ2h0U2xvcGUgPSBDb2xvckdlb20uZ2V0MzIocmlnaHRTbG9wZSA9PT0gdW5kZWZpbmVkID8gMHhEQkRCREIgOiByaWdodFNsb3BlKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcblxuLypcbiAqIGhvcml6b250YWwgc2lkZSBkb2Vzbid0IGFjdHVhbGx5IGV4aXN0IGluIHRoZSBTbG9wZSBwcmltaXRpdmVcbiAqIHlvdSBjYW4gYXNzaWduIHRoZSBzYW1lIGhvcml6b250YWwgY29sb3IgYXMgY3ViZVxuICogc28gdGhhdCB5b3Ugd2lsbCBiZSBhYmxlIHRvIGFycmFuZ2UgdGhlIHNsb3BlIHdpdGggY3ViZVxuICovXG5wLmdldEJ5SG9yaXpvbnRhbENvbG9yID0gZnVuY3Rpb24gKGhvcml6b250YWwpIHtcbiAgICByZXR1cm4gbmV3IFNsb3BlQ29sb3IoXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiA0KSxcbiAgICAgICAgLy9hcHBseSBoaWdodGxpZ2h0XG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgMCwgdHJ1ZSksXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiAyKSxcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCB0aGlzLkJSSUdIVE5FU1NfR0FJTiksXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiAxLjUpLFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIHRoaXMuQlJJR0hUTkVTU19HQUlOICogMC41KVxuICAgICk7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlQ29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2xvcGVDb2xvcjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIFNpZGVYRGltZW5zaW9uLCBwO1xuU2lkZVhEaW1lbnNpb24gPSBmdW5jdGlvbiAoeEF4aXMsIHpBeGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHhBeGlzLCB6QXhpcyk7XG59O1xucCA9IFNpZGVYRGltZW5zaW9uLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERpbWVuc2lvbigpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHhBeGlzLCB6QXhpcykge1xuICAgIHRoaXMueEF4aXMgPSB4QXhpcyB8fCAzMDtcbiAgICB0aGlzLnpBeGlzID0gekF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd4QXhpcyBtdXN0IGJlIGV2ZW4gbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgLy8geEF4aXMgfHwgekF4aXMgPSA0IGZsb29kRmlsbCBjb3VsZCBub3QgYmUgYXBwbGllZFxuICAgIGlmICh0aGlzLnhBeGlzIDw9IDQgfHwgdGhpcy56QXhpcyA8PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTaWRlWERpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWRlWERpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIFNpZGVZRGltZW5zaW9uLCBwO1xuXG5TaWRlWURpbWVuc2lvbiA9IGZ1bmN0aW9uICh5QXhpcywgekF4aXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoeUF4aXMsIHpBeGlzKTtcbn07XG5wID0gU2lkZVlEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeUF4aXMsIHpBeGlzKSB7XG4gICAgdGhpcy55QXhpcyA9IHlBeGlzIHx8IDMwO1xuICAgIHRoaXMuekF4aXMgPSB6QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnlBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3lBeGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICAvLyB5QXhpcyB8fCB6QXhpcyA9IDQgZmxvb2RGaWxsIGNvdWxkIG5vdCBiZSBhcHBsaWVkXG4gICAgaWYgKHRoaXMueUF4aXMgPD0gNCB8fCB0aGlzLnpBeGlzIDw9IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1NpZGVZRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZGVZRGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0Q29sb3IgPSByZXF1aXJlKCcuL0Fic3RyYWN0Q29sb3InKTtcbnZhciBDb2xvckdlb20gPSByZXF1aXJlKCcuLi91dGlscy9Db2xvckdlb20nKTtcblxudmFyIExpbmVDb2xvciwgcDtcbkxpbmVDb2xvciA9IGZ1bmN0aW9uIChib3JkZXIsIGlubmVyKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGJvcmRlciwgaW5uZXIpO1xufTtcbnAgPSBMaW5lQ29sb3IucHJvdG90eXBlID0gbmV3IEFic3RyYWN0Q29sb3IoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICB0aGlzLmJvcmRlciA9IENvbG9yR2VvbS5nZXQzMihib3JkZXIgPT09IHVuZGVmaW5lZCA/IDB4ODc4Nzg3IDogYm9yZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lQ29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZUNvbG9yO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgQnJpY2tEaW1lbnNpb24sIHA7XG5Ccmlja0RpbWVuc2lvbiA9IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoeEF4aXMsIHlBeGlzKTtcbn07XG5wID0gQnJpY2tEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzKSB7XG4gICAgdGhpcy54QXhpcyA9IHhBeGlzIHx8IDMwO1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnhBeGlzICUgMiA9PT0gMSB8fCB0aGlzLnlBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3gseUF4aXMgbXVzdCBiZSBldmVuIG51bWJlcicpO1xuICAgIH1cblxuICAgIC8vIHhBeGlzIHx8IHlBeGlzID0gNCBmbG9vZEZpbGwgY291bGQgbm90IGJlIGFwcGxpZWRcbiAgICBpZiAodGhpcy54QXhpcyA8PSA0IHx8IHRoaXMueUF4aXMgPD0gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpbWVuc2lvbiBpcyB0b28gc21hbGwnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbQnJpY2tEaW1lbnNpb25dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnJpY2tEaW1lbnNpb247XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9pbnQsIHA7XG5Qb2ludCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHgsIHkpO1xufTtcbnAgPSBQb2ludC5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5wLnggPSAwO1xucC55ID0gMDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdGhpcy54ID0gKHggPT09IHVuZGVmaW5lZCA/IDAgOiB4KTtcbiAgICB0aGlzLnkgPSAoeSA9PT0gdW5kZWZpbmVkID8gMCA6IHkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tQb2ludCB4IDogJyArIHRoaXMueCArICcsIHkgOiAnICsgdGhpcy55ICsgJ10nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb2ludDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24nKTtcbnZhciBTaWRlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvU2lkZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBTaWRlWCwgcDtcblNpZGVYID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTaWRlWC5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTaWRlWERpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNpZGVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24uekF4aXMgKyB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDI7XG5cbiAgICAvLyB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeC50eCA9IDA7XG4gICAgdGhpcy5tYXRyaXgudHkgPSAtdGhpcy5kaW1lbnNpb24uekF4aXM7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEuY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5iaXRtYXBEYXRhLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeE9mZnNldElubmVyLCB5T2Zmc2V0SW5uZXIsIHhPZmZzZXRPdXQsIHlPZmZzZXRPdXQsIGksIGosIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldElubmVyID0gMDtcbiAgICB5T2Zmc2V0SW5uZXIgPSB0aGlzLmRpbWVuc2lvbi56QXhpcztcbiAgICB4T2Zmc2V0T3V0ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxO1xuICAgIHlPZmZzZXRPdXQgPSB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi56QXhpcyAtIDE7XG4gICAgYm9yZGVyQ29sb3IgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5pbm5lcjtcblxuICAgIC8veCBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRJbm5lciArIGksIHlPZmZzZXRJbm5lciArIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0IC0gaSwgeU9mZnNldE91dCAtIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgfVxuXG4gICAgLy96IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24uekF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldElubmVyLCB5T2Zmc2V0SW5uZXIgLSBqLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0LCB5T2Zmc2V0T3V0ICsgaiwgYm9yZGVyQ29sb3IpO1xuICAgIH1cblxuICAgIC8vZmlsbCBhbiBwaXhlbCBncmFwaGljIGVuY2xvc2VkXG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbChNYXRoLmZsb29yKHRoaXMudyAvIDIpLCBNYXRoLmZsb29yKHRoaXMuaCAvIDIpLCB0aGlzLmNvbG9yLmlubmVyKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1NpZGVYXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZGVYO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFNpZGVZRGltZW5zaW9uID0gcmVxdWlyZSgnLi4vZGltZW5zaW9ucy9TaWRlWURpbWVuc2lvbicpO1xudmFyIFNpZGVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9TaWRlQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIFNpZGVZLCBwO1xuU2lkZVkgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IFNpZGVZLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdFJlbmRlcihkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xuICAgIHRoaXMuaW5pdFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuaW5pdEJpdG1hcERhdGEoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kXG5wLmluaXRSZW5kZXIgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy51c2VEZWZhdWx0Q2FudmFzID0gdXNlRGVmYXVsdENhbnZhcyB8fCBmYWxzZTtcbiAgICB0aGlzLmJvcmRlciA9IGJvcmRlciB8fCBib3JkZXIgPT09IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbiA9PT0gdW5kZWZpbmVkID8gbmV3IFNpZGVZRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgU2lkZUNvbG9yKCkgOiBjb2xvcjtcbn07XG5cbnAuaW5pdFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLncgPSB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmRpbWVuc2lvbi56QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMjtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLXRoaXMuZGltZW5zaW9uLnlBeGlzICsgMjtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC10aGlzLmRpbWVuc2lvbi56QXhpcztcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YS5jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLmJpdG1hcERhdGEuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4T2Zmc2V0SW5uZXIsIHlPZmZzZXRJbm5lciwgeE9mZnNldE91dCwgeU9mZnNldE91dCwgaSwgaiwgYm9yZGVyQ29sb3I7XG5cbiAgICB4T2Zmc2V0SW5uZXIgPSAwO1xuICAgIHlPZmZzZXRJbm5lciA9IHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnpBeGlzIC0gMTtcbiAgICB4T2Zmc2V0T3V0ID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLSAxO1xuICAgIHlPZmZzZXRPdXQgPSB0aGlzLmRpbWVuc2lvbi56QXhpcztcbiAgICBib3JkZXJDb2xvciA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLmlubmVyO1xuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldElubmVyICsgaSwgeU9mZnNldElubmVyIC0gTWF0aC5mbG9vcihpIC8gMiksIGJvcmRlckNvbG9yKTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRPdXQgLSBpLCB5T2Zmc2V0T3V0ICsgTWF0aC5mbG9vcihpIC8gMiksIGJvcmRlckNvbG9yKTtcbiAgICB9XG5cbiAgICAvL3ogYXhpc1xuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi56QXhpczsgaiArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0SW5uZXIsIHlPZmZzZXRJbm5lciArIGosIGJvcmRlckNvbG9yKTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRPdXQsIHlPZmZzZXRPdXQgLSBqLCBib3JkZXJDb2xvcik7XG4gICAgfVxuXG4gICAgLy9maWxsIGFuIHBpeGVsIGdyYXBoaWMgZW5jbG9zZWRcbiAgICB0aGlzLmJpdG1hcERhdGEuZmxvb2RGaWxsKE1hdGguZmxvb3IodGhpcy53IC8gMiksIE1hdGguZmxvb3IodGhpcy5oIC8gMiksIHRoaXMuY29sb3IuaW5uZXIpO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbU2lkZVldJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lkZVk7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3REaW1lbnNpb24gPSByZXF1aXJlKCcuL0Fic3RyYWN0RGltZW5zaW9uJyk7XG5cbnZhciBDdWJlRGltZW5zaW9uLCBwO1xuQ3ViZURpbWVuc2lvbiA9IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMsIHpBeGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHhBeGlzLCB5QXhpcywgekF4aXMpO1xufTtcbnAgPSBDdWJlRGltZW5zaW9uLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERpbWVuc2lvbigpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHhBeGlzLCB5QXhpcywgekF4aXMpIHtcbiAgICB0aGlzLnhBeGlzID0geEF4aXMgfHwgMzA7XG4gICAgdGhpcy55QXhpcyA9IHlBeGlzIHx8IDMwO1xuICAgIHRoaXMuekF4aXMgPSB6QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnhBeGlzICUgMiA9PT0gMSB8fCB0aGlzLnlBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3gseUF4aXMgbXVzdCBiZSBldmVuIG51bWJlcicpO1xuICAgIH1cblxuICAgIC8vIHhBeGlzIHx8IHlBeGlzID0gNCBmbG9vZEZpbGwgY291bGQgbm90IGJlIGFwcGxpZWRcbiAgICBpZiAodGhpcy54QXhpcyA8PSA0IHx8IHRoaXMueUF4aXMgPD0gNCB8fCB0aGlzLnpBeGlzIDw9IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0N1YmVEaW1lbnNpb25dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ3ViZURpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdENvbG9yID0gcmVxdWlyZSgnLi9BYnN0cmFjdENvbG9yJyk7XG52YXIgQ29sb3JHZW9tID0gcmVxdWlyZSgnLi4vdXRpbHMvQ29sb3JHZW9tJyk7XG5cbnZhciBDdWJlQ29sb3IsIHA7XG5DdWJlQ29sb3IgPSBmdW5jdGlvbiAoYm9yZGVyLCBib3JkZXJIaWdobGlnaHQsIGxlZnQsIHJpZ2h0LCBob3Jpem9udGFsKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgaG9yaXpvbnRhbCk7XG59O1xucCA9IEN1YmVDb2xvci5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RDb2xvcigpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5CUklHSFRORVNTX0dBSU4gPSAtMjA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9yZGVyLCBib3JkZXJIaWdobGlnaHQsIGxlZnQsIHJpZ2h0LCBob3Jpem9udGFsKSB7XG4gICAgdGhpcy5ib3JkZXIgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVyID09PSB1bmRlZmluZWQgPyAweDg3ODc4NyA6IGJvcmRlcik7XG4gICAgdGhpcy5ib3JkZXJIaWdobGlnaHQgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVySGlnaGxpZ2h0ID09PSB1bmRlZmluZWQgPyAweEZGRkZGRiA6IGJvcmRlckhpZ2hsaWdodCk7XG4gICAgdGhpcy5sZWZ0ID0gQ29sb3JHZW9tLmdldDMyKGxlZnQgPT09IHVuZGVmaW5lZCA/IDB4QzlDRkQwIDogbGVmdCk7XG4gICAgdGhpcy5yaWdodCA9IENvbG9yR2VvbS5nZXQzMihyaWdodCA9PT0gdW5kZWZpbmVkID8gMHhFM0UzRTMgOiByaWdodCk7XG4gICAgdGhpcy5ob3Jpem9udGFsID0gQ29sb3JHZW9tLmdldDMyKGhvcml6b250YWwgPT09IHVuZGVmaW5lZCA/IDB4RUVFRkYwIDogaG9yaXpvbnRhbCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldEJ5SG9yaXpvbnRhbENvbG9yID0gZnVuY3Rpb24gKGhvcml6b250YWwpIHtcbiAgICByZXR1cm4gbmV3IEN1YmVDb2xvcihcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCB0aGlzLkJSSUdIVE5FU1NfR0FJTiAqIDQpLFxuICAgICAgICAvL2FwcGx5IGhpZ2h0bGlnaHRcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCAwLCB0cnVlKSxcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCB0aGlzLkJSSUdIVE5FU1NfR0FJTiAqIDIpLFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIHRoaXMuQlJJR0hUTkVTU19HQUlOKSxcbiAgICAgICAgaG9yaXpvbnRhbFxuICAgICk7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0N1YmVDb2xvcl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDdWJlQ29sb3I7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9pbnQgPSByZXF1aXJlKCcuL1BvaW50Jyk7XG5cbnZhciBQb2ludDNELCBwO1xuUG9pbnQzRCA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHgsIHksIHopO1xufTtcbnAgPSBQb2ludDNELnByb3RvdHlwZTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAueCA9IDA7XG5wLnkgPSAwO1xucC56ID0gMDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gICAgdGhpcy54ID0gKHggPT09IHVuZGVmaW5lZCA/IDAgOiB4KTtcbiAgICB0aGlzLnkgPSAoeSA9PT0gdW5kZWZpbmVkID8gMCA6IHkpO1xuICAgIHRoaXMueiA9ICh6ID09PSB1bmRlZmluZWQgPyAwIDogeik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvR2xvYmFsQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgdmFyIHAyRCA9IG5ldyBQb2ludChcbiAgICAgICAgdGhpcy54IC0gdGhpcy55LFxuICAgICAgICBNYXRoLmZsb29yKHRoaXMueCAvIDIgKyB0aGlzLnkgLyAyKSAtIHRoaXMuelxuICAgICk7XG5cbiAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcDJELnggPSBwMkQueCArIG9mZnNldC54O1xuICAgICAgICBwMkQueSA9IHAyRC55ICsgb2Zmc2V0Lnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHAyRDtcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUG9pbnQzRCB4IDogJyArIHRoaXMueCArICcsIHkgOiAnICsgdGhpcy55ICsgJywgejogJyArIHRoaXMueiArICddJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnQzRDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuLypnbG9iYWwgZG9jdW1lbnQ6dHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbnZhc01hbmFnZXIsIHA7XG5DYW52YXNNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzTWFuYWdlciBpcyBhIHN0YXRpYyBDbGFzcywgY2Fubm90IGJlIGluc3RhbmNlZC4nKTtcbn07XG5wID0gQ2FudmFzTWFuYWdlcjtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuZGVmYXVsdENhbnZhcyA9IG51bGw7XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldERlZmF1bHRDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC5kZWZhdWx0Q2FudmFzID0gcC5kZWZhdWx0Q2FudmFzIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHJldHVybiBwLmRlZmF1bHRDYW52YXM7XG59O1xuXG5wLmdldE5ld0NhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0NhbnZhc01hbmFnZXJdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzTWFuYWdlcjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCcmlja0RpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24nKTtcbnZhciBTaWRlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvU2lkZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBCcmljaywgcDtcbkJyaWNrID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBCcmljay5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBCcmlja0RpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNpZGVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSAodGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcykgLyAyO1xuXG4gICAgLy8gMjIuNiBkZWdyZWVzIGltcGxlbWVudGF0aW9uXG4gICAgdGhpcy53IC09IDI7XG4gICAgdGhpcy5oIC09IDE7XG5cbiAgICAvLyB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeC50eCA9IC10aGlzLmRpbWVuc2lvbi55QXhpcyArIDI7XG4gICAgdGhpcy5tYXRyaXgudHkgPSAwO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRJbm5lciwgeU9mZnNldElubmVyLCB4T2Zmc2V0T3V0LCB5T2Zmc2V0T3V0LCBpLCBqLCBib3JkZXJDb2xvcjtcblxuICAgIHhPZmZzZXRJbm5lciA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMjtcbiAgICB5T2Zmc2V0SW5uZXIgPSAwO1xuICAgIHhPZmZzZXRPdXQgPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDE7XG4gICAgeU9mZnNldE91dCA9IHRoaXMuaCAtIDE7XG4gICAgYm9yZGVyQ29sb3IgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5pbm5lcjtcblxuICAgIC8veCBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRJbm5lciArIGksIHlPZmZzZXRJbm5lciArIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0IC0gaSwgeU9mZnNldE91dCAtIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgfVxuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldElubmVyICsgMSAtIGosIHlPZmZzZXRJbm5lciArIE1hdGguZmxvb3IoaiAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0IC0gMSArIGosIHlPZmZzZXRPdXQgLSBNYXRoLmZsb29yKGogLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgIH1cblxuICAgIC8vZmlsbCBhbiBwaXhlbCBncmFwaGljIGVuY2xvc2VkXG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbChNYXRoLmZsb29yKHRoaXMudyAvIDIpLCBNYXRoLmZsb29yKHRoaXMuaCAvIDIpLCB0aGlzLmNvbG9yLmlubmVyKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0JyaWNrXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyaWNrO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgUHlyYW1pZERpbWVuc2lvbiwgcDtcblB5cmFtaWREaW1lbnNpb24gPSBmdW5jdGlvbiAoYXhpcywgdGFsbCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShheGlzLCB0YWxsKTtcbn07XG5wID0gUHlyYW1pZERpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChheGlzLCB0YWxsKSB7XG4gICAgdGhpcy54QXhpcyA9IGF4aXMgfHwgMzA7XG4gICAgdGhpcy55QXhpcyA9IGF4aXMgfHwgMzA7XG4gICAgdGhpcy50YWxsID0gdGFsbCB8fCBmYWxzZTtcblxuICAgIGlmICh0aGlzLnhBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F4aXMgbXVzdCBiZSBldmVuIG51bWJlcicpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnhBeGlzIDw9IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1B5cmFtaWREaW1lbnNpb25dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHlyYW1pZERpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdENvbG9yID0gcmVxdWlyZSgnLi9BYnN0cmFjdENvbG9yJyk7XG52YXIgQ29sb3JHZW9tID0gcmVxdWlyZSgnLi4vdXRpbHMvQ29sb3JHZW9tJyk7XG5cbnZhciBQeXJhbWlkQ29sb3IsIHA7XG5QeXJhbWlkQ29sb3IgPSBmdW5jdGlvbiAoYm9yZGVyLCBib3JkZXJIaWdobGlnaHQsIGxlZnQsIHJpZ2h0KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCk7XG59O1xucCA9IFB5cmFtaWRDb2xvci5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RDb2xvcigpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5CUklHSFRORVNTX0dBSU4gPSAtMjA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9yZGVyLCBib3JkZXJIaWdobGlnaHQsIGxlZnQsIHJpZ2h0KSB7XG4gICAgdGhpcy5ib3JkZXIgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVyID09PSB1bmRlZmluZWQgPyAweDk0OTY5OCA6IGJvcmRlcik7XG4gICAgdGhpcy5ib3JkZXJIaWdobGlnaHQgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVySGlnaGxpZ2h0ID09PSB1bmRlZmluZWQgPyAweEZGRkZGRiA6IGJvcmRlckhpZ2hsaWdodCk7XG4gICAgdGhpcy5sZWZ0ID0gQ29sb3JHZW9tLmdldDMyKGxlZnQgPT09IHVuZGVmaW5lZCA/IDB4RTZFOEU5IDogbGVmdCk7XG4gICAgdGhpcy5yaWdodCA9IENvbG9yR2VvbS5nZXQzMihyaWdodCA9PT0gdW5kZWZpbmVkID8gMHhFRUVGRjAgOiByaWdodCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldEJ5UmlnaHRDb2xvciA9IGZ1bmN0aW9uIChyaWdodCkge1xuICAgIHJldHVybiBuZXcgUHlyYW1pZENvbG9yKFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKHJpZ2h0LCB0aGlzLkJSSUdIVE5FU1NfR0FJTiAqIDQpLFxuICAgICAgICAvL2FwcGx5IGhpZ2h0bGlnaHRcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhyaWdodCwgMCwgdHJ1ZSksXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MocmlnaHQsIHRoaXMuQlJJR0hUTkVTU19HQUlOKSxcbiAgICAgICAgcmlnaHRcbiAgICApO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tQeXJhbWlkQ29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHlyYW1pZENvbG9yO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgTGluZVhEaW1lbnNpb24sIHA7XG5MaW5lWERpbWVuc2lvbiA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGF4aXMpO1xufTtcbnAgPSBMaW5lWERpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh4QXhpcykge1xuICAgIHRoaXMueEF4aXMgPSB4QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnhBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3hBeGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy54QXhpcyA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0xpbmVYRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmVYRGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgTGluZVlEaW1lbnNpb24sIHA7XG5MaW5lWURpbWVuc2lvbiA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGF4aXMpO1xufTtcbnAgPSBMaW5lWURpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh5QXhpcykge1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnlBeGlzICUgMiA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3lBeGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy55QXhpcyA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0xpbmVZRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmVZRGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgTGluZVpEaW1lbnNpb24sIHA7XG5MaW5lWkRpbWVuc2lvbiA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGF4aXMpO1xufTtcbnAgPSBMaW5lWkRpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh6QXhpcykge1xuICAgIHRoaXMuekF4aXMgPSB6QXhpcyB8fCAzMDtcblxuICAgIGlmICh0aGlzLnpBeGlzIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0xpbmVaRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmVaRGltZW5zaW9uO1xuIiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSksZC5yZXNwb25zZVR5cGU9XCJibG9iXCIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxkLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSYmIWE/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxnJiYoZy5kb2N1bWVudC50aXRsZT1nLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1iLnR5cGUsaT0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxqPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxnP2cubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZz1udWxsfSxrLnJlYWRBc0RhdGFVUkwoYil9ZWxzZXt2YXIgbD1mLlVSTHx8Zi53ZWJraXRVUkwsbT1sLmNyZWF0ZU9iamVjdFVSTChiKTtnP2cubG9jYXRpb249bTpsb2NhdGlvbi5ocmVmPW0sZz1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChtKX0sNEU0KX19KTtmLnNhdmVBcz1nLnNhdmVBcz1nLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuLypnbG9iYWwgd2luZG93OnRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBvYmVsaXNrXG4gKiovXG52YXIgb2JlbGlzayA9IHt9O1xuXG5vYmVsaXNrLkN1YmUgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvQ3ViZScpO1xub2JlbGlzay5CcmljayA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9CcmljaycpO1xub2JlbGlzay5QeXJhbWlkID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1B5cmFtaWQnKTtcbm9iZWxpc2suTGluZVggPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVgnKTtcbm9iZWxpc2suTGluZVkgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVknKTtcbm9iZWxpc2suTGluZVogPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVonKTtcbm9iZWxpc2suU2lkZVggPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvU2lkZVgnKTtcbm9iZWxpc2suU2lkZVkgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvU2lkZVknKTtcbm9iZWxpc2suU2xvcGVFYXN0ID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1Nsb3BlRWFzdCcpO1xub2JlbGlzay5TbG9wZU5vcnRoID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1Nsb3BlTm9ydGgnKTtcbm9iZWxpc2suU2xvcGVTb3V0aCA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9TbG9wZVNvdXRoJyk7XG5vYmVsaXNrLlNsb3BlV2VzdCA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9TbG9wZVdlc3QnKTtcblxub2JlbGlzay5Db2xvclBhdHRlcm4gPSByZXF1aXJlKCcuL3V0aWxzL0NvbG9yUGF0dGVybicpO1xub2JlbGlzay5Db2xvckdlb20gPSByZXF1aXJlKCcuL3V0aWxzL0NvbG9yR2VvbScpO1xub2JlbGlzay5DYW52YXNNYW5hZ2VyID0gcmVxdWlyZSgnLi91dGlscy9DYW52YXNNYW5hZ2VyJyk7XG5vYmVsaXNrLkNhbnZhc1Rvb2wgPSByZXF1aXJlKCcuL3V0aWxzL0NhbnZhc1Rvb2wnKTtcblxub2JlbGlzay5NYXRyaXggPSByZXF1aXJlKCcuL2dlb20vTWF0cml4Jyk7XG5vYmVsaXNrLlBvaW50ID0gcmVxdWlyZSgnLi9nZW9tL1BvaW50Jyk7XG5vYmVsaXNrLlBvaW50M0QgPSByZXF1aXJlKCcuL2dlb20vUG9pbnQzRCcpO1xuXG5vYmVsaXNrLlBpeGVsVmlldyA9IHJlcXVpcmUoJy4vZGlzcGxheS9QaXhlbFZpZXcnKTtcbm9iZWxpc2suUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuL2Rpc3BsYXkvUGl4ZWxPYmplY3QnKTtcbm9iZWxpc2suQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG5cbm9iZWxpc2suQnJpY2tEaW1lbnNpb24gPSByZXF1aXJlKCcuL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24nKTtcbm9iZWxpc2suQ3ViZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9DdWJlRGltZW5zaW9uJyk7XG5vYmVsaXNrLlB5cmFtaWREaW1lbnNpb24gPSByZXF1aXJlKCcuL2RpbWVuc2lvbnMvUHlyYW1pZERpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWERpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWURpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWkRpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWkRpbWVuc2lvbicpO1xub2JlbGlzay5TaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TaWRlWERpbWVuc2lvbicpO1xub2JlbGlzay5TaWRlWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TaWRlWURpbWVuc2lvbicpO1xub2JlbGlzay5TbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TbG9wZURpbWVuc2lvbicpO1xuXG5vYmVsaXNrLkxpbmVDb2xvciA9IHJlcXVpcmUoJy4vY29sb3JzL0xpbmVDb2xvcicpO1xub2JlbGlzay5DdWJlQ29sb3IgPSByZXF1aXJlKCcuL2NvbG9ycy9DdWJlQ29sb3InKTtcbm9iZWxpc2suUHlyYW1pZENvbG9yID0gcmVxdWlyZSgnLi9jb2xvcnMvUHlyYW1pZENvbG9yJyk7XG5vYmVsaXNrLlNpZGVDb2xvciA9IHJlcXVpcmUoJy4vY29sb3JzL1NpZGVDb2xvcicpO1xub2JlbGlzay5TbG9wZUNvbG9yID0gcmVxdWlyZSgnLi9jb2xvcnMvU2xvcGVDb2xvcicpO1xuXG53aW5kb3cub2JlbGlzayA9IG9iZWxpc2s7XG5cbm1vZHVsZS5leHBvcnRzID0gb2JlbGlzaztcblxuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEN1YmVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL0N1YmVEaW1lbnNpb24nKTtcbnZhciBCcmlja0RpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24nKTtcbnZhciBTaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24nKTtcbnZhciBTaWRlWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVlEaW1lbnNpb24nKTtcbnZhciBDdWJlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvQ3ViZUNvbG9yJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuLi9kaXNwbGF5L1BpeGVsT2JqZWN0Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xudmFyIEJyaWNrID0gcmVxdWlyZSgnLi9CcmljaycpO1xudmFyIFNpZGVYID0gcmVxdWlyZSgnLi9TaWRlWCcpO1xudmFyIFNpZGVZID0gcmVxdWlyZSgnLi9TaWRlWScpO1xuXG52YXIgQ3ViZSwgcDtcbkN1YmUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IEN1YmUucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgQ3ViZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IEN1YmVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmRpbWVuc2lvbi56QXhpcyArICh0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzKSAvIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMTtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLXRoaXMuZGltZW5zaW9uLnlBeGlzICsgMjtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC10aGlzLmRpbWVuc2lvbi56QXhpcztcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJyaWNrLCBzaWRlWCwgc2lkZVksIHBvQnJpY2ssIHBvWCwgcG9ZLCBjdHgsIGJtZCwgb2Zmc2V0WCwgb2Zmc2V0WSxcbiAgICAgICAgaSwgaiwgaztcbiAgICAvLyBob3Jpem9udGFsIGxheWVyXG4gICAgYnJpY2sgPSBuZXcgQnJpY2soXG4gICAgICAgIG5ldyBCcmlja0RpbWVuc2lvbih0aGlzLmRpbWVuc2lvbi54QXhpcywgdGhpcy5kaW1lbnNpb24ueUF4aXMpLFxuICAgICAgICBuZXcgU2lkZUNvbG9yKHRoaXMuY29sb3IuYm9yZGVyLCB0aGlzLmNvbG9yLmhvcml6b250YWwpLFxuICAgICAgICB0aGlzLmJvcmRlclxuICAgICk7XG5cbiAgICAvLyBsZWZ0IHNpZGVcbiAgICBzaWRlWCA9IG5ldyBTaWRlWChcbiAgICAgICAgbmV3IFNpZGVYRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnhBeGlzLCB0aGlzLmRpbWVuc2lvbi56QXhpcyksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IodGhpcy5jb2xvci5ib3JkZXIsIHRoaXMuY29sb3IubGVmdCksXG4gICAgICAgIHRoaXMuYm9yZGVyXG4gICAgKTtcblxuICAgIC8vIHJpZ2h0IHNpZGVcbiAgICBzaWRlWSA9IG5ldyBTaWRlWShcbiAgICAgICAgbmV3IFNpZGVZRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnlBeGlzLCB0aGlzLmRpbWVuc2lvbi56QXhpcyksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IodGhpcy5jb2xvci5ib3JkZXIsIHRoaXMuY29sb3IucmlnaHQpLFxuICAgICAgICB0aGlzLmJvcmRlclxuICAgICk7XG5cbiAgICBwb0JyaWNrID0gbmV3IFBpeGVsT2JqZWN0KGJyaWNrKTtcbiAgICBwb1ggPSBuZXcgUGl4ZWxPYmplY3Qoc2lkZVgpO1xuICAgIHBvWSA9IG5ldyBQaXhlbE9iamVjdChzaWRlWSk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvQnJpY2suY2FudmFzLCBwb0JyaWNrLnggKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIsIHBvQnJpY2sueSk7XG4gICAgY3R4LmRyYXdJbWFnZShwb1guY2FudmFzLCBwb1gueCwgcG9YLnkgKyB0aGlzLmRpbWVuc2lvbi56QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDEpO1xuICAgIGN0eC5kcmF3SW1hZ2UocG9ZLmNhbnZhcywgcG9ZLnggKyB0aGlzLncgLSAyLCBwb1gueSArIHRoaXMuZGltZW5zaW9uLnpBeGlzICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyIC0gMSk7XG5cbiAgICAvLyBoaWdobGlnaHQgJiBoaWdobGlnaHQgZml4XG4gICAgYm1kID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgpO1xuXG4gICAgaWYgKHRoaXMuYm9yZGVyKSB7XG4gICAgICAgIG9mZnNldFggPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDI7XG4gICAgICAgIG9mZnNldFkgPSAodGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcykgLyAyIC0gMjtcblxuICAgICAgICAvL3RoZSAycHggaW4gYm91bmRpbmcgd2l0aG91dCBoaWdodGxpZ2h0XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDI7IGkgKz0gMSkge1xuICAgICAgICAgICAgYm1kLnNldFBpeGVsKG9mZnNldFggKyAxIC0gaSwgb2Zmc2V0WSAtIE1hdGguZmxvb3IoaSAvIDIpLCB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RoZSAycHggaW4gYm91bmRpbmcgd2l0aG91dCBoaWdodGxpZ2h0XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDI7IGogKz0gMSkge1xuICAgICAgICAgICAgYm1kLnNldFBpeGVsKG9mZnNldFggKyBqLCBvZmZzZXRZIC0gTWF0aC5mbG9vcihqIC8gMiksIHRoaXMuY29sb3IuYm9yZGVySGlnaGxpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoayA9IDA7IGsgPCB0aGlzLmRpbWVuc2lvbi56QXhpczsgayArPSAxKSB7XG4gICAgICAgICAgICBibWQuc2V0UGl4ZWwob2Zmc2V0WCwgb2Zmc2V0WSArIGssIHRoaXMuY29sb3IuYm9yZGVySGlnaGxpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi56QXhpczsgaSArPSAxKSB7XG4gICAgICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCAodGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcykgLyAyIC0gMSArIGksIHRoaXMuY29sb3IubGVmdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYm1kLmNvbnRleHQucHV0SW1hZ2VEYXRhKGJtZC5pbWFnZURhdGEsIDAsIDApO1xuICAgIGN0eC5kcmF3SW1hZ2UoYm1kLmNhbnZhcywgMCwgMCk7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDdWJlXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmU7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHlyYW1pZERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvUHlyYW1pZERpbWVuc2lvbicpO1xudmFyIFB5cmFtaWRDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9QeXJhbWlkQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIFB5cmFtaWQsIHA7XG5QeXJhbWlkID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBQeXJhbWlkLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBwcml2YXRlIHByb3BlcnRpZXNcbnAuaFNpemUgPSBudWxsO1xucC5oT2Zmc2V0ID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBQeXJhbWlkRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgUHlyYW1pZENvbG9yKCkgOiBjb2xvcjtcblxuICAgIHRoaXMuaFNpemUgPSB0aGlzLmRpbWVuc2lvbi50YWxsID8gdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyIDogdGhpcy5kaW1lbnNpb24ueEF4aXM7XG4gICAgdGhpcy5oT2Zmc2V0ID0gdGhpcy5kaW1lbnNpb24udGFsbCA/IC0zIDogLTI7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmhTaXplICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyO1xuXG4gICAgLy8gMjIuNiBkZWdyZWVzIGltcGxlbWVudGF0aW9uXG4gICAgdGhpcy53IC09IDI7XG4gICAgdGhpcy5oICs9IHRoaXMuaE9mZnNldDtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLXRoaXMuZGltZW5zaW9uLnhBeGlzICsgMjtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC10aGlzLmhTaXplIC8gMiArIDIgLSAodGhpcy5kaW1lbnNpb24udGFsbCA/IHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiA6IDEpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9yQm9yZGVyTGVmdCwgY29sb3JCb3JkZXJSaWdodCwgY29sb3JCb3JkZXJIaWdobGlnaHQsXG4gICAgICAgIGksIGosIGssIGwxLCBtMSwgbDIsIG0yO1xuXG4gICAgY29sb3JCb3JkZXJMZWZ0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IubGVmdDtcbiAgICBjb2xvckJvcmRlclJpZ2h0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IucmlnaHQ7XG5cbiAgICBjb2xvckJvcmRlckhpZ2hsaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQgOiBjb2xvckJvcmRlckxlZnQ7XG5cbiAgICAvL3ogYXhpcyB8fCBoaWdodGxpZ2h0XG4gICAgZm9yIChrID0gMDsgayA8IHRoaXMuaFNpemUgKyB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgLSA0OyBrICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgayArIDMgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChpLCB0aGlzLmhTaXplICsgTWF0aC5mbG9vcihpIC8gMikgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgfVxuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24ueEF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoaiArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgdGhpcy5oU2l6ZSArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiAtIE1hdGguZmxvb3IoaiAvIDIpIC0gMSArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRpbWVuc2lvbi50YWxsKSB7XG4gICAgICAgIC8vbGVmdCBlZGdlXG4gICAgICAgIGZvciAobDEgPSAwOyBsMSA8IHRoaXMuaFNpemU7IGwxICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChsMSwgdGhpcy5oU2l6ZSAtIGwxICsgdGhpcy5oT2Zmc2V0LCBjb2xvckJvcmRlckxlZnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9yaWdodCBlZGdlXG4gICAgICAgIGZvciAobTEgPSAwOyBtMSA8IHRoaXMuaFNpemU7IG0xICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChtMSArIHRoaXMuaFNpemUgLSAyLCBtMSArIDEgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9sZWZ0IGVkZ2VcbiAgICAgICAgZm9yIChsMiA9IDA7IGwyIDwgdGhpcy5oU2l6ZSAtIDI7IGwyICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChNYXRoLmZsb29yKGwyIC8gMiksIHRoaXMuaFNpemUgLSBsMiArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmlnaHQgZWRnZVxuICAgICAgICBmb3IgKG0yID0gMjsgbTIgPCB0aGlzLmhTaXplOyBtMiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoTWF0aC5mbG9vcihtMiAvIDIpICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCBtMiArIDEgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmJvcmRlcikge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCB0aGlzLmhTaXplICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyIC0gMSArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvL2Zsb29kZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCB0aGlzLmhTaXplICsgTWF0aC5mbG9vcigodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxKSAvIDIpICsgdGhpcy5oT2Zmc2V0IC0gMSwgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDMsIHRoaXMuaFNpemUgKyBNYXRoLmZsb29yKCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDEpIC8gMikgKyB0aGlzLmhPZmZzZXQgLSAyLCB0aGlzLmNvbG9yLmxlZnQpO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUHlyYW1pZF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQeXJhbWlkO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmVYRGltZW5zaW9uID0gcmVxdWlyZSgnLi4vZGltZW5zaW9ucy9MaW5lWERpbWVuc2lvbicpO1xudmFyIExpbmVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9MaW5lQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIExpbmVYLCBwO1xuTGluZVggPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gTGluZVgucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdFJlbmRlcihkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgTGluZVhEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBMaW5lQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMjtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gMDtcbiAgICB0aGlzLm1hdHJpeC50eSA9IDA7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcblxucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YS5jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLmJpdG1hcERhdGEuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4T2Zmc2V0Qm9yZGVyLCB5T2Zmc2V0Qm9yZGVyLCBpLCBib3JkZXJDb2xvcjtcblxuICAgIHhPZmZzZXRCb3JkZXIgPSAwO1xuICAgIHlPZmZzZXRCb3JkZXIgPSAwO1xuICAgIGJvcmRlckNvbG9yID0gdGhpcy5jb2xvci5ib3JkZXI7XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0Qm9yZGVyICsgaSwgeU9mZnNldEJvcmRlciArIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTGluZVhdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZVg7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGluZVlEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL0xpbmVZRGltZW5zaW9uJyk7XG52YXIgTGluZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL0xpbmVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xuXG52YXIgTGluZVksIHA7XG5MaW5lWSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBMaW5lWS5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpO1xuICAgIHRoaXMuaW5pdFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuaW5pdEJpdG1hcERhdGEoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kXG5wLmluaXRSZW5kZXIgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBMaW5lWURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IExpbmVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAtdGhpcy5kaW1lbnNpb24ueUF4aXMgKyAyO1xuICAgIHRoaXMubWF0cml4LnR5ID0gMDtcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xuXG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIsIGksIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldEJvcmRlciA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMTtcbiAgICB5T2Zmc2V0Qm9yZGVyID0gMDtcbiAgICBib3JkZXJDb2xvciA9IHRoaXMuY29sb3IuYm9yZGVyO1xuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGkgKz0gMSkge1xuICAgICAgICBjb25zb2xlLmxvZyhpKTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRCb3JkZXIgLSBpLCB5T2Zmc2V0Qm9yZGVyICsgTWF0aC5mbG9vcihpIC8gMiksIGJvcmRlckNvbG9yKTtcbiAgICB9XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lWV0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lWTtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMaW5lWkRpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvTGluZVpEaW1lbnNpb24nKTtcbnZhciBMaW5lQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvTGluZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBMaW5lWiwgcDtcbkxpbmVaID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IExpbmVaLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy51c2VEZWZhdWx0Q2FudmFzID0gdXNlRGVmYXVsdENhbnZhcyB8fCBmYWxzZTtcbiAgICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbiA9PT0gdW5kZWZpbmVkID8gbmV3IExpbmVaRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgTGluZUNvbG9yKCkgOiBjb2xvcjtcbn07XG5cbnAuaW5pdFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLncgPSAxO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnpBeGlzO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAwO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLXRoaXMuZGltZW5zaW9uLnpBeGlzICsgMTtcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xuXG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIsIGksIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldEJvcmRlciA9IDA7XG4gICAgeU9mZnNldEJvcmRlciA9IDA7XG4gICAgYm9yZGVyQ29sb3IgPSB0aGlzLmNvbG9yLmJvcmRlcjtcblxuICAgIC8veSBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnpBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIgKyBpLCBib3JkZXJDb2xvcik7XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTGluZVpdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZVo7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2xvcGVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1Nsb3BlRGltZW5zaW9uJyk7XG52YXIgU2xvcGVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9TbG9wZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBTbG9wZUVhc3QsIHA7XG5TbG9wZUVhc3QgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IFNsb3BlRWFzdC5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyICsgdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyO1xuXG4gICAgLy8gMjIuNiBkZWdyZWVzIGltcGxlbWVudGF0aW9uXG4gICAgdGhpcy53IC09IDI7XG4gICAgdGhpcy5oIC09IDM7XG5cbiAgICAvLyB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeC50eCA9IC0odGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyKTtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC0odGhpcy5kaW1lbnNpb24ueEF4aXMgKiAzIC8gMiAtIDIpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9yQm9yZGVyTGVmdCwgY29sb3JCb3JkZXJSaWdodCxcbiAgICAgICAgaSwgaiwgaywgbSwgbjtcblxuICAgIGNvbG9yQm9yZGVyTGVmdCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLmxlZnQ7XG4gICAgY29sb3JCb3JkZXJSaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLnJpZ2h0U2xvcGU7XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoaiwgdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyIC0gTWF0aC5mbG9vcihqIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKGogKyB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIHRoaXMuaCAtIE1hdGguZmxvb3IoaiAvIDIpIC0gMSwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgLy8geCBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKGksIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiArIE1hdGguZmxvb3IoaSAvIDIpLCBjb2xvckJvcmRlckxlZnQpO1xuICAgIH1cblxuICAgIC8vIHogYXhpc1xuICAgIGZvciAoayA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDE7IGsgPCB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDI7IGsgKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMCwgaywgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvLyBzbG90XG4gICAgZm9yIChtID0gMDsgbSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzICogMiAtIDI7IG0gKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAxICsgTWF0aC5mbG9vcihtIC8gMiksIG0sIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMSArIE1hdGguZmxvb3IobSAvIDIpLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgKyBtIC0gMSwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgLy8gZmxvb2QgZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyLCAxLCB0aGlzLmNvbG9yLnJpZ2h0U2xvcGUpO1xuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAzLCB0aGlzLmggLSAzLCB0aGlzLmNvbG9yLmxlZnQpO1xuICAgIC8vIGhhY2sgc2luZ2xlIHBpeGVsXG4gICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgdGhpcy5oIC0gMiwgdGhpcy5jb2xvci5sZWZ0KTtcblxuICAgIC8vIGhpZ2hsaWdodFxuICAgIGlmICh0aGlzLmJvcmRlcikge1xuICAgICAgICBmb3IgKG4gPSAxOyBuIDwgdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyIC0gMzsgbiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMSArIE1hdGguZmxvb3IobiAvIDIpLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgKyBuIC0gMSwgdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbU2xvcGVFYXN0XSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlRWFzdDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2xvcGVEaW1lbnNpb24nKTtcbnZhciBTbG9wZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1Nsb3BlQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcbnZhciBTaWRlWCA9IHJlcXVpcmUoJy4vU2lkZVgnKTtcbnZhciBTaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24nKTtcbnZhciBTaWRlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvU2lkZUNvbG9yJyk7XG52YXIgUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuLi9kaXNwbGF5L1BpeGVsT2JqZWN0Jyk7XG5cbnZhciBTbG9wZU5vcnRoLCBwO1xuU2xvcGVOb3J0aCA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gU2xvcGVOb3J0aC5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAzIC8gMiArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMjtcblxuICAgIC8vIDIyLjYgZGVncmVlcyBpbXBsZW1lbnRhdGlvblxuICAgIHRoaXMudyAtPSAyO1xuICAgIHRoaXMuaCAtPSAzO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAtKHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMik7XG4gICAgdGhpcy5tYXRyaXgudHkgPSAtKHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMik7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb2xvckJvcmRlckxlZnQsIGNvbG9yQm9yZGVyUmlnaHQsIGNvbG9yQm9yZGVySGlnaGxpZ2h0LFxuICAgICAgICBzaWRlWCwgcG9YLCBjdHgsIGJtZCxcbiAgICAgICAgaSwgaiwgbjtcblxuICAgIGNvbG9yQm9yZGVyTGVmdCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLmxlZnQ7XG4gICAgY29sb3JCb3JkZXJSaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLnJpZ2h0O1xuICAgIGNvbG9yQm9yZGVySGlnaGxpZ2h0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCA6IHRoaXMuY29sb3IubGVmdDtcblxuICAgIHNpZGVYID0gbmV3IFNpZGVYKFxuICAgICAgICBuZXcgU2lkZVhEaW1lbnNpb24odGhpcy5kaW1lbnNpb24ueEF4aXMsIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IoY29sb3JCb3JkZXJMZWZ0LCB0aGlzLmNvbG9yLmxlZnQpXG4gICAgKTtcblxuICAgIHBvWCA9IG5ldyBQaXhlbE9iamVjdChzaWRlWCk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvWC5jYW52YXMsIHBvWC54LCBwb1gueSArIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMik7XG5cbiAgICBibWQgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCk7XG5cbiAgICAvLyBjbG9zZSB0aGUgcGF0aCBmb3IgZmxvb2RmaWxsXG4gICAgZm9yIChpID0gdGhpcy5oIC0gdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAzIC8gMiArIDI7IGkgPCB0aGlzLmg7IGkgKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCBpLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGogPSAxOyBqIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGogKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgKyBqIC0gMiwgdGhpcy5oIC0gTWF0aC5mbG9vcihqIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzICsgaiAtIDIsIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiAtIDIgKyBqLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyBmbG9vZCBmaWxsXG4gICAgYm1kLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcyArIDEsIHRoaXMuaCAtIDMsIHRoaXMuY29sb3IucmlnaHQpO1xuXG4gICAgLy9oaWdobGlnaHRcbiAgICBmb3IgKG4gPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDI7IG4gPCB0aGlzLmggLSAxOyBuICs9IDEpIHtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMSwgbiwgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgICAgIGJtZC5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIG4sIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBibWQuY29udGV4dC5wdXRJbWFnZURhdGEoYm1kLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgY3R4LmRyYXdJbWFnZShibWQuY2FudmFzLCAwLCAwKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlTm9ydGhdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2xvcGVOb3J0aDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2xvcGVEaW1lbnNpb24nKTtcbnZhciBTbG9wZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1Nsb3BlQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIFNsb3BlU291dGgsIHA7XG5TbG9wZVNvdXRoID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTbG9wZVNvdXRoLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdFJlbmRlcihkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xuICAgIHRoaXMuaW5pdFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuaW5pdEJpdG1hcERhdGEoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kXG5wLmluaXRSZW5kZXIgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy51c2VEZWZhdWx0Q2FudmFzID0gdXNlRGVmYXVsdENhbnZhcyB8fCBmYWxzZTtcbiAgICB0aGlzLmJvcmRlciA9IGJvcmRlciB8fCBib3JkZXIgPT09IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbiA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgU2xvcGVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMztcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIpO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDMgLyAyIC0gMik7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEuY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5iaXRtYXBEYXRhLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29sb3JCb3JkZXJMZWZ0LCBjb2xvckJvcmRlclJpZ2h0LFxuICAgICAgICBpLCBqLCBrLCBtLCBuO1xuXG4gICAgY29sb3JCb3JkZXJMZWZ0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IubGVmdFNsb3BlO1xuICAgIGNvbG9yQm9yZGVyUmlnaHQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5yaWdodDtcblxuICAgIC8vIHggYXhpc1xuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaiArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChqLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDIgKyBNYXRoLmZsb29yKGogLyAyKSAtIDMsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChqICsgdGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyLCBNYXRoLmZsb29yKGogLyAyKSwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyICsgaSwgdGhpcy5oIC0gTWF0aC5mbG9vcihpIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyB6IGF4aXNcbiAgICBmb3IgKGsgPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgLSAxOyBrIDwgdGhpcy5oIC0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyOyBrICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMudyAtIDEsIGssIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgIH1cblxuICAgIC8vIHNsb3RcbiAgICBmb3IgKG0gPSAwOyBtIDwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gMjsgbSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChNYXRoLmZsb29yKG0gLyAyKSwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gbSAtIDMsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIgKyBNYXRoLmZsb29yKG0gLyAyKSwgdGhpcy5oIC0gbSAtIDEsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgfVxuXG4gICAgLy8gZmxvb2QgZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAxLCAxLCB0aGlzLmNvbG9yLmxlZnRTbG9wZSk7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcywgdGhpcy5oIC0gMywgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgLy8gaGFjayBzaW5nbGUgcGl4ZWxcbiAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCB0aGlzLmggLSAyLCB0aGlzLmNvbG9yLnJpZ2h0KTtcblxuICAgIC8vIGhpZ2hsaWdodFxuICAgIGlmICh0aGlzLmJvcmRlcikge1xuICAgICAgICBmb3IgKG4gPSAxOyBuIDwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gMzsgbiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyICsgTWF0aC5mbG9vcihuIC8gMiksIHRoaXMuaCAtIG4gLSAxLCB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTbG9wZVNvdXRoXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlU291dGg7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2xvcGVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1Nsb3BlRGltZW5zaW9uJyk7XG52YXIgU2xvcGVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9TbG9wZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG52YXIgU2lkZVkgPSByZXF1aXJlKCcuL1NpZGVZJyk7XG52YXIgU2lkZVlEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1NpZGVZRGltZW5zaW9uJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIFBpeGVsT2JqZWN0ID0gcmVxdWlyZSgnLi4vZGlzcGxheS9QaXhlbE9iamVjdCcpO1xuXG52YXIgU2xvcGVXZXN0LCBwO1xuU2xvcGVXZXN0ID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTbG9wZVdlc3QucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgU2xvcGVEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZUNvbG9yKCkgOiBjb2xvcjtcbn07XG5cbnAuaW5pdFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLncgPSB0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICogMyAvIDIgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMztcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIpO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLSh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29sb3JCb3JkZXJMZWZ0LCBjb2xvckJvcmRlclJpZ2h0LCBjb2xvckJvcmRlckhpZ2hsaWdodCxcbiAgICAgICAgc2lkZVksIHBvWSwgY3R4LCBibWQsXG4gICAgICAgIGksIGosIG47XG5cbiAgICBjb2xvckJvcmRlckxlZnQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5sZWZ0O1xuICAgIGNvbG9yQm9yZGVyUmlnaHQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5yaWdodDtcbiAgICBjb2xvckJvcmRlckhpZ2hsaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQgOiB0aGlzLmNvbG9yLmxlZnQ7XG5cbiAgICBzaWRlWSA9IG5ldyBTaWRlWShcbiAgICAgICAgbmV3IFNpZGVZRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnlBeGlzLCB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIpLFxuICAgICAgICBuZXcgU2lkZUNvbG9yKGNvbG9yQm9yZGVyUmlnaHQsIHRoaXMuY29sb3IucmlnaHQpXG4gICAgKTtcblxuICAgIHBvWSA9IG5ldyBQaXhlbE9iamVjdChzaWRlWSk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvWS5jYW52YXMsIHBvWS54ICsgdGhpcy53IC0gMiwgcG9ZLnkgKyB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIpO1xuXG4gICAgYm1kID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgpO1xuXG4gICAgLy8gY2xvc2UgdGhlIHBhdGggZm9yIGZsb29kZmlsbFxuICAgIGZvciAoaSA9IHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzICogMyAvIDIgKyAyOyBpIDwgdGhpcy5oOyBpICs9IDEpIHtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgaSwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDE7IGogKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwoaiwgdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgLSAzICsgTWF0aC5mbG9vcihqIC8gMiksIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIGJtZC5zZXRQaXhlbChqLCB0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDMgLSBqLCBjb2xvckJvcmRlckxlZnQpO1xuICAgIH1cblxuICAgIC8vIGZsb29kIGZpbGxcbiAgICBibWQuZmxvb2RGaWxsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMywgdGhpcy5oIC0gMywgdGhpcy5jb2xvci5sZWZ0KTtcblxuICAgIC8vaGlnaGxpZ2h0XG4gICAgZm9yIChuID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyOyBuIDwgdGhpcy5oIC0gMTsgbiArPSAxKSB7XG4gICAgICAgIGJtZC5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIG4sIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBibWQuY29udGV4dC5wdXRJbWFnZURhdGEoYm1kLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgY3R4LmRyYXdJbWFnZShibWQuY2FudmFzLCAwLCAwKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlV2VzdF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbG9wZVdlc3Q7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JQYXR0ZXJuLCBwO1xuXG5Db2xvclBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvclBhdHRlcm4gaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENvbG9yUGF0dGVybjtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuR1JBU1NfR1JFRU4gPSAweENDRkYwMDtcbnAuWUVMTE9XID0gMHhGRkZGMDA7XG5wLldJTkVfUkVEID0gMHhGRjAwOTk7XG5wLlBJTksgPSAweEZGN0NCRjtcbnAuUFVSUExFID0gMHhDQzAwRkY7XG5wLkJMVUUgPSAweDAwQ0NGRjtcbnAuR1JBWSA9IDB4RUVFRUVFO1xucC5CTEFDSyA9IDB4NjY2NjY2O1xucC5GSU5FX0NPTE9SUyA9XG4gICAgW1xuICAgICAgICBwLkdSQVNTX0dSRUVOLFxuICAgICAgICBwLllFTExPVyxcbiAgICAgICAgcC5XSU5FX1JFRCxcbiAgICAgICAgcC5QSU5LLFxuICAgICAgICBwLlBVUlBMRSxcbiAgICAgICAgcC5CTFVFLFxuICAgICAgICBwLkdSQVksXG4gICAgICAgIHAuQkxBQ0tcbiAgICBdO1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXRSYW5kb21Db21mb3J0YWJsZUNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwLkZJTkVfQ09MT1JTW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHAuRklORV9DT0xPUlMubGVuZ3RoKV07XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0NvbG9yUGF0dGVybl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvclBhdHRlcm47XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FudmFzVG9vbCwgcDtcblxuQ2FudmFzVG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhc1Rvb2wgaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENhbnZhc1Rvb2w7XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldFBpeGVsID0gZnVuY3Rpb24gKGltYWdlRGF0YSwgeCwgeSkge1xuICAgIHZhciBkYXRhLCBpbmRleCwgciwgZywgYjtcblxuICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcbiAgICBpbmRleCA9ICh5ICogaW1hZ2VEYXRhLndpZHRoICsgeCkgKiA0O1xuICAgIHIgPSBkYXRhW2luZGV4XTtcbiAgICBnID0gZGF0YVtpbmRleCArIDFdO1xuICAgIGIgPSBkYXRhW2luZGV4ICsgMl07XG5cbiAgICByZXR1cm4gKChyIDw8IDE2KSB8IChnIDw8IDgpIHwgYik7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0NhbnZhc1Rvb2xdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzVG9vbDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuLypnbG9iYWwgalF1ZXJ5OnRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJy4uL2dlb20vUG9pbnQnKTtcbnZhciBQaXhlbE9iamVjdCA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvUGl4ZWxPYmplY3QnKTtcblxudmFyIFBpeGVsVmlldywgcDtcblBpeGVsVmlldyA9IGZ1bmN0aW9uIChjYW52YXMsIHBvaW50KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGNhbnZhcywgcG9pbnQpO1xufTtcbnAgPSBQaXhlbFZpZXcucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5jYW52YXMgPSBudWxsO1xucC5jb250ZXh0ID0gbnVsbDtcbnAucG9pbnQgPSBudWxsO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNhbnZhcywgcG9pbnQpIHtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhcyBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChjYW52YXMgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICAgICAgICAgIGNhbnZhcyA9IGNhbnZhcy5nZXQoMCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcblxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jb250ZXh0Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGV4dC5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgIHRoaXMucG9pbnQgPSBwb2ludCB8fCBuZXcgUG9pbnQoMCwgMCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnJlbmRlck9iamVjdCA9IGZ1bmN0aW9uIChwcmltaXRpdmUsIHBvaW50M0QpIHtcbiAgICB2YXIgcG8gPSBuZXcgUGl4ZWxPYmplY3QocHJpbWl0aXZlLCBwb2ludDNEKTtcbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHBvLmNhbnZhcywgdGhpcy5wb2ludC54ICsgcG8ueCwgdGhpcy5wb2ludC55ICsgcG8ueSk7XG59O1xuXG5wLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1BpeGVsVmlld10nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaXhlbFZpZXc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==